# utils/session_manager.py
"""
Gerenciador centralizado do session_state para resolver problemas de persist√™ncia
Este arquivo deve ser importado no in√≠cio de cada p√°gina para garantir consist√™ncia
"""

import streamlit as st
import pandas as pd
from typing import Dict, Any, Optional, Tuple


class SessionStateManager:
    """Gerenciador centralizado do session_state"""

    @staticmethod
    def verificar_dados_inventario() -> Dict[str, Any]:
        """
        Verifica status dos dados de invent√°rio de forma robusta

        Returns:
            dict: Status completo dos dados
        """
        resultado = {
            'encontrado': False,
            'dados': None,
            'fonte': None,
            'diagnostico': [],
            'colunas_obrigatorias': ['D_cm', 'H_m', 'talhao', 'parcela'],
            'colunas_encontradas': []
        }

        # Lista de poss√≠veis keys onde os dados podem estar
        keys_candidatas = [
            'dados_inventario',
            'df_inventario',
            'inventario_dados',
            'dados_florestal',
            'arquivo_dados_inventario'
        ]

        # Verificar cada key candidata
        for key in keys_candidatas:
            if hasattr(st.session_state, key):
                valor = getattr(st.session_state, key)
                resultado['diagnostico'].append(f"‚úì Encontrada key '{key}'")

                if isinstance(valor, pd.DataFrame) and len(valor) > 0:
                    resultado['diagnostico'].append(f"  - √â DataFrame com {len(valor)} registros")

                    # Verificar colunas
                    colunas_presentes = []
                    for col_obrigatoria in resultado['colunas_obrigatorias']:
                        if col_obrigatoria in valor.columns:
                            colunas_presentes.append(col_obrigatoria)

                    resultado['colunas_encontradas'] = colunas_presentes

                    # Se tem pelo menos 3 das 4 colunas obrigat√≥rias, considerar v√°lido
                    if len(colunas_presentes) >= 3:
                        resultado['encontrado'] = True
                        resultado['dados'] = valor
                        resultado['fonte'] = key
                        resultado['diagnostico'].append(f"  ‚úÖ Dados v√°lidos encontrados em '{key}'")

                        # Padronizar refer√™ncia principal
                        if key != 'dados_inventario':
                            st.session_state.dados_inventario = valor
                            resultado['diagnostico'].append("  üîÑ Refer√™ncia padronizada para 'dados_inventario'")

                        return resultado
                    else:
                        resultado['diagnostico'].append(
                            f"  ‚ùå Faltam colunas obrigat√≥rias: {set(resultado['colunas_obrigatorias']) - set(colunas_presentes)}")

                else:
                    resultado['diagnostico'].append(f"  ‚ùå '{key}' n√£o √© DataFrame v√°lido")
            else:
                resultado['diagnostico'].append(f"‚úó Key '{key}' n√£o encontrada")

        # Se nenhuma key padr√£o funcionou, buscar em todas as keys
        if not resultado['encontrado']:
            resultado['diagnostico'].append("üîç Buscando em todas as keys do session_state...")

            for key in st.session_state.keys():
                if any(termo in key.lower() for termo in ['dados', 'inventario', 'df', 'florestal']):
                    valor = getattr(st.session_state, key)
                    if isinstance(valor, pd.DataFrame) and len(valor) > 0:
                        # Verificar se parece com dados de invent√°rio
                        colunas_valor = valor.columns.tolist()
                        colunas_presentes = [col for col in resultado['colunas_obrigatorias'] if col in colunas_valor]

                        if len(colunas_presentes) >= 2:  # Crit√©rio mais flex√≠vel na busca geral
                            resultado['encontrado'] = True
                            resultado['dados'] = valor
                            resultado['fonte'] = key
                            resultado['colunas_encontradas'] = colunas_presentes
                            resultado['diagnostico'].append(f"  ‚úÖ Dados encontrados em '{key}' (busca geral)")

                            # Padronizar refer√™ncia
                            st.session_state.dados_inventario = valor
                            resultado['diagnostico'].append("  üîÑ Refer√™ncia criada como 'dados_inventario'")
                            break

        return resultado

    @staticmethod
    def verificar_configuracao() -> Dict[str, Any]:
        """
        Verifica status da configura√ß√£o global

        Returns:
            dict: Status da configura√ß√£o
        """
        resultado = {
            'existe': False,
            'configurado': False,
            'config': None,
            'diagnostico': [],
            'keys_importantes': ['diametro_min', 'metodo_area', 'incluir_nao_lineares']
        }

        if hasattr(st.session_state, 'config_global'):
            config = st.session_state.config_global
            resultado['existe'] = True
            resultado['config'] = config
            resultado['diagnostico'].append("‚úì config_global encontrada")

            if isinstance(config, dict):
                # Verificar se est√° marcada como configurada
                if config.get('configurado', False):
                    resultado['configurado'] = True
                    resultado['diagnostico'].append("‚úÖ Marcada como configurada")
                else:
                    # Verificar se tem conte√∫do que indica configura√ß√£o real
                    keys_presentes = [key for key in resultado['keys_importantes'] if key in config]
                    if len(keys_presentes) >= 2:
                        resultado['diagnostico'].append("‚ö†Ô∏è Parece configurada mas n√£o marcada como tal")
                        # Auto-corrigir
                        config['configurado'] = True
                        st.session_state.config_global = config
                        resultado['configurado'] = True
                        resultado['diagnostico'].append("üîÑ Auto-corrigido flag 'configurado'")
                    else:
                        resultado['diagnostico'].append("‚ùå Configura√ß√£o incompleta")

                resultado['diagnostico'].append(f"  - Keys presentes: {len(config)}")
                resultado['diagnostico'].append(f"  - Keys importantes: {keys_presentes}")
            else:
                resultado['diagnostico'].append("‚ùå config_global n√£o √© dict")
        else:
            resultado['diagnostico'].append("‚úó config_global n√£o encontrada")

        return resultado

    @staticmethod
    def sincronizar_flags() -> list:
        """
        Sincroniza flags do session_state com estado real

        Returns:
            list: Lista de corre√ß√µes aplicadas
        """
        correcoes = []

        # Verificar dados
        status_dados = SessionStateManager.verificar_dados_inventario()
        if status_dados['encontrado']:
            if not hasattr(st.session_state, 'arquivos_carregados') or not st.session_state.arquivos_carregados:
                st.session_state.arquivos_carregados = True
                correcoes.append(f"Flag 'arquivos_carregados' setada (dados em '{status_dados['fonte']}')")
        else:
            if hasattr(st.session_state, 'arquivos_carregados') and st.session_state.arquivos_carregados:
                st.session_state.arquivos_carregados = False
                correcoes.append("Flag 'arquivos_carregados' limpa (sem dados v√°lidos)")

        # Verificar configura√ß√£o
        status_config = SessionStateManager.verificar_configuracao()
        if status_config['configurado']:
            # J√° est√° correto ou foi auto-corrigido
            pass

        return correcoes

    @staticmethod
    def diagnostico_completo() -> Dict[str, Any]:
        """
        Diagn√≥stico completo do session_state

        Returns:
            dict: Diagn√≥stico detalhado
        """
        diagnostico = {
            'dados': SessionStateManager.verificar_dados_inventario(),
            'configuracao': SessionStateManager.verificar_configuracao(),
            'session_state_info': {
                'total_keys': len(st.session_state.keys()),
                'keys_relevantes': []
            },
            'flags': {
                'arquivos_carregados': getattr(st.session_state, 'arquivos_carregados', False)
            }
        }

        # Listar keys relevantes
        for key in st.session_state.keys():
            if any(termo in key.lower() for termo in ['dados', 'config', 'arquivo', 'resultado', 'inventario']):
                valor = getattr(st.session_state, key)
                info_key = {
                    'key': key,
                    'tipo': type(valor).__name__,
                    'tamanho': None
                }

                if hasattr(valor, '__len__'):
                    try:
                        info_key['tamanho'] = len(valor)
                    except:
                        pass

                diagnostico['session_state_info']['keys_relevantes'].append(info_key)

        return diagnostico

    @staticmethod
    def inicializar_pagina() -> Dict[str, Any]:
        """
        Fun√ß√£o principal para inicializar qualquer p√°gina
        Deve ser chamada no in√≠cio de cada p√°gina

        Returns:
            dict: Status da inicializa√ß√£o
        """
        resultado = {
            'dados_ok': False,
            'config_ok': False,
            'correcoes_aplicadas': [],
            'problemas': [],
            'diagnostico': None
        }

        # Aplicar corre√ß√µes autom√°ticas
        correcoes = SessionStateManager.sincronizar_flags()
        resultado['correcoes_aplicadas'] = correcoes

        # Verificar status final
        status_dados = SessionStateManager.verificar_dados_inventario()
        status_config = SessionStateManager.verificar_configuracao()

        resultado['dados_ok'] = status_dados['encontrado']
        resultado['config_ok'] = status_config['configurado']

        if not resultado['dados_ok']:
            resultado['problemas'].append("Dados n√£o carregados")

        if not resultado['config_ok']:
            resultado['problemas'].append("Sistema n√£o configurado")

        # Gerar diagn√≥stico se h√° problemas
        if resultado['problemas']:
            resultado['diagnostico'] = SessionStateManager.diagnostico_completo()

        return resultado

    @staticmethod
    def mostrar_debug_sidebar():
        """Mostra informa√ß√µes de debug na sidebar"""
        if st.sidebar.checkbox("üîç Debug Session State", key="debug_session_manager"):
            st.sidebar.markdown("---")
            st.sidebar.subheader("üîß Session Manager")

            # Verificar e mostrar status
            status_dados = SessionStateManager.verificar_dados_inventario()
            status_config = SessionStateManager.verificar_configuracao()

            # Status dos dados
            if status_dados['encontrado']:
                st.sidebar.success(f"‚úÖ Dados: {len(status_dados['dados'])} registros")
                st.sidebar.caption(f"Fonte: {status_dados['fonte']}")
            else:
                st.sidebar.error("‚ùå Dados n√£o encontrados")

            # Status da configura√ß√£o
            if status_config['configurado']:
                st.sidebar.success("‚úÖ Configura√ß√£o OK")
            else:
                st.sidebar.error("‚ùå N√£o configurado")

            # Bot√£o para for√ßar sincroniza√ß√£o
            if st.sidebar.button("üîÑ Sincronizar Estado"):
                correcoes = SessionStateManager.sincronizar_flags()
                if correcoes:
                    for correcao in correcoes:
                        st.sidebar.success(f"‚úÖ {correcao}")
                    st.rerun()
                else:
                    st.sidebar.info("‚ÑπÔ∏è Estado j√° sincronizado")

            # Mostrar diagn√≥stico detalhado
            if st.sidebar.checkbox("üìã Diagn√≥stico Detalhado"):
                diagnostico = SessionStateManager.diagnostico_completo()

                st.sidebar.write("**üìä Resumo:**")
                st.sidebar.write(f"- Total keys: {diagnostico['session_state_info']['total_keys']}")
                st.sidebar.write(f"- Keys relevantes: {len(diagnostico['session_state_info']['keys_relevantes'])}")

                st.sidebar.write("**üîç Dados:**")
                for diag in diagnostico['dados']['diagnostico'][-3:]:  # √öltimas 3 linhas
                    st.sidebar.caption(diag)

                st.sidebar.write("**‚öôÔ∏è Config:**")
                for diag in diagnostico['configuracao']['diagnostico'][-2:]:  # √öltimas 2 linhas
                    st.sidebar.caption(diag)


def inicializar_pagina_sistema():
    """
    Fun√ß√£o para ser importada e usada no in√≠cio de cada p√°gina

    Returns:
        bool: True se pr√©-requisitos est√£o OK, False caso contr√°rio
    """
    # Criar inst√¢ncia do manager
    manager = SessionStateManager()

    # Inicializar
    status = manager.inicializar_pagina()

    # Mostrar debug se solicitado
    manager.mostrar_debug_sidebar()

    # Retornar se est√° tudo OK
    return len(status['problemas']) == 0


def verificar_e_corrigir_dados():
    """
    Fun√ß√£o espec√≠fica para verificar e corrigir dados

    Returns:
        tuple: (dados_encontrados: bool, dataframe: pd.DataFrame ou None, diagnostico: list)
    """
    manager = SessionStateManager()
    status = manager.verificar_dados_inventario()

    return status['encontrado'], status['dados'], status['diagnostico']


def verificar_e_corrigir_config():
    """
    Fun√ß√£o espec√≠fica para verificar e corrigir configura√ß√£o

    Returns:
        tuple: (configurado: bool, config: dict ou None, diagnostico: list)
    """
    manager = SessionStateManager()
    status = manager.verificar_configuracao()

    return status['configurado'], status['config'], status['diagnostico']


# Fun√ß√£o de conveni√™ncia para uso nas p√°ginas
def mostrar_status_prerequisitos():
    """Mostra status dos pr√©-requisitos de forma visual"""
    dados_ok, dados, _ = verificar_e_corrigir_dados()
    config_ok, config, _ = verificar_e_corrigir_config()

    col1, col2 = st.columns(2)

    with col1:
        if dados_ok:
            st.success(f"‚úÖ Dados carregados ({len(dados)} registros)")
        else:
            st.error("‚ùå Dados n√£o carregados")

    with col2:
        if config_ok:
            st.success("‚úÖ Sistema configurado")
        else:
            st.error("‚ùå Sistema n√£o configurado")

    return dados_ok and config_ok


# Exemplo de uso nas p√°ginas:
def exemplo_uso_na_pagina():
    """
    Exemplo de como usar o SessionStateManager nas p√°ginas
    """
    # No in√≠cio da p√°gina (depois dos imports):
    from utils.session_manager import inicializar_pagina_sistema, mostrar_status_prerequisitos

    # Inicializar sistema
    prerequisitos_ok = inicializar_pagina_sistema()

    if not prerequisitos_ok:
        st.error("‚ùå Pr√©-requisitos n√£o atendidos")
        mostrar_status_prerequisitos()

        # Bot√µes para navegar
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üè† P√°gina Principal"):
                st.switch_page("Principal.py")
        with col2:
            if st.button("‚öôÔ∏è Configura√ß√µes"):
                st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")

        return  # Para a execu√ß√£o da p√°gina

    # Continuar com o resto da p√°gina...
    st.title("Minha P√°gina")
    # resto do c√≥digo...


# IMPLEMENTA√á√ÉO COMPLETA PARA P√ÅGINAS ESPEC√çFICAS

def integrar_em_modelos_hipsometricos():
    """
    Exemplo completo para a p√°gina de Modelos Hipsom√©tricos
    """
    # No in√≠cio do arquivo, depois dos imports:
    import streamlit as st
    import pandas as pd
    # ... outros imports

    # Importar o session manager
    from utils.session_manager import (
        inicializar_pagina_sistema,
        mostrar_status_prerequisitos,
        verificar_e_corrigir_dados,
        verificar_e_corrigir_config
    )

    def main():
        st.set_page_config(
            page_title="Modelos Hipsom√©tricos",
            page_icon="üå≥",
            layout="wide"
        )

        # PASSO 1: Inicializar sistema e verificar pr√©-requisitos
        prerequisitos_ok = inicializar_pagina_sistema()

        if not prerequisitos_ok:
            st.title("üå≥ Modelos Hipsom√©tricos")
            st.error("‚ùå Pr√©-requisitos n√£o atendidos")

            # Mostrar status detalhado
            dados_ok, dados, diag_dados = verificar_e_corrigir_dados()
            config_ok, config, diag_config = verificar_e_corrigir_config()

            col1, col2 = st.columns(2)
            with col1:
                if dados_ok:
                    st.success(f"‚úÖ Dados: {len(dados)} registros")
                else:
                    st.error("‚ùå Dados n√£o carregados")

            with col2:
                if config_ok:
                    st.success("‚úÖ Sistema configurado")
                else:
                    st.error("‚ùå Sistema n√£o configurado")

            # Diagn√≥stico detalhado
            with st.expander("üîç Diagn√≥stico Detalhado"):
                if not dados_ok:
                    st.write("**Problema com dados:**")
                    for linha in diag_dados[-5:]:  # √öltimas 5 linhas
                        st.write(f"‚Ä¢ {linha}")

                if not config_ok:
                    st.write("**Problema com configura√ß√£o:**")
                    for linha in diag_config[-3:]:  # √öltimas 3 linhas
                        st.write(f"‚Ä¢ {linha}")

            # Bot√µes de navega√ß√£o
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("üè† P√°gina Principal", key="nav_principal"):
                    st.switch_page("Principal.py")
            with col2:
                if st.button("‚öôÔ∏è Configura√ß√µes", key="nav_config"):
                    st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")
            with col3:
                if st.button("üîÑ Recarregar", key="nav_reload"):
                    st.rerun()

            return  # Para aqui se pr√©-requisitos n√£o OK

        # PASSO 2: Se chegou aqui, pr√©-requisitos est√£o OK
        st.title("üå≥ Modelos Hipsom√©tricos")
        st.markdown("### An√°lise da Rela√ß√£o Altura-Di√¢metro")

        # Dados est√£o garantidamente dispon√≠veis
        df_inventario = st.session_state.dados_inventario
        config_global = st.session_state.config_global

        # PASSO 3: Continuar com a l√≥gica espec√≠fica da p√°gina
        mostrar_configuracao_aplicada(config_global)

        # Preview dos dados
        df_filtrado = aplicar_preview_dados(df_inventario, config_global)
        if df_filtrado is None:
            return

        # Bot√£o para executar an√°lise
        if st.button("üöÄ Executar An√°lise Hipsom√©trica", type="primary"):
            executar_analise_hipsometrica(df_filtrado, config_global)

        # Mostrar resultados se existirem
        if 'resultados_hipsometricos' in st.session_state:
            mostrar_resultados_salvos()


def integrar_em_modelos_volumetricos():
    """
    Exemplo para p√°gina de Modelos Volum√©tricos
    """
    from utils.session_manager import inicializar_pagina_sistema

    def main():
        st.set_page_config(
            page_title="Modelos Volum√©tricos",
            page_icon="üìä",
            layout="wide"
        )

        # Verificar pr√©-requisitos
        if not inicializar_pagina_sistema():
            st.title("üìä Modelos Volum√©tricos")
            st.error("‚ùå Pr√©-requisitos n√£o atendidos")

            # Verificar se modelos hipsom√©tricos foram executados
            if 'resultados_hipsometricos' not in st.session_state:
                st.warning("‚ö†Ô∏è Execute primeiro os Modelos Hipsom√©tricos")
                if st.button("üå≥ Ir para Modelos Hipsom√©tricos"):
                    st.switch_page("pages/1_üå≥_Modelos_Hipsom√©tricos.py")

            return

        # Verificar pr√©-requisito espec√≠fico desta p√°gina
        if 'resultados_hipsometricos' not in st.session_state:
            st.title("üìä Modelos Volum√©tricos")
            st.warning("‚ö†Ô∏è Modelos hipsom√©tricos s√£o pr√©-requisito para esta etapa")

            if st.button("üå≥ Executar Modelos Hipsom√©tricos Primeiro"):
                st.switch_page("pages/1_üå≥_Modelos_Hipsom√©tricos.py")
            return

        # Continuar com l√≥gica espec√≠fica...
        st.title("üìä Modelos Volum√©tricos")
        # resto da implementa√ß√£o...


def integrar_em_inventario_completo():
    """
    Exemplo para p√°gina de Invent√°rio Completo
    """
    from utils.session_manager import inicializar_pagina_sistema

    def main():
        st.set_page_config(
            page_title="Invent√°rio Completo",
            page_icon="üå≤",
            layout="wide"
        )

        # Verificar pr√©-requisitos b√°sicos
        if not inicializar_pagina_sistema():
            st.title("üå≤ Invent√°rio Completo")
            st.error("‚ùå Pr√©-requisitos b√°sicos n√£o atendidos")
            return

        # Verificar pr√©-requisitos espec√≠ficos desta p√°gina
        prerequisitos_especificos = [
            ('resultados_hipsometricos', 'Modelos Hipsom√©tricos'),
            ('resultados_volumetricos', 'Modelos Volum√©tricos')
        ]

        faltando = []
        for key, nome in prerequisitos_especificos:
            if key not in st.session_state:
                faltando.append(nome)

        if faltando:
            st.title("üå≤ Invent√°rio Completo")
            st.warning(f"‚ö†Ô∏è Pr√©-requisitos faltando: {', '.join(faltando)}")

            st.info("üí° Execute as etapas anteriores primeiro:")

            col1, col2 = st.columns(2)
            with col1:
                if st.button("üå≥ Modelos Hipsom√©tricos"):
                    st.switch_page("pages/1_üå≥_Modelos_Hipsom√©tricos.py")
            with col2:
                if st.button("üìä Modelos Volum√©tricos"):
                    st.switch_page("pages/2_üìä_Modelos_Volum√©tricos.py")

            return

        # Se chegou aqui, todos os pr√©-requisitos est√£o OK
        st.title("üå≤ Invent√°rio Completo")
        st.success("‚úÖ Todos os pr√©-requisitos atendidos")

        # Continuar com a implementa√ß√£o...
        # Aqui voc√™ tem garantia de que todos os dados e resultados est√£o dispon√≠veis


# TEMPLATE GEN√âRICO PARA QUALQUER P√ÅGINA
def template_pagina_generica():
    """
    Template gen√©rico que pode ser adaptado para qualquer p√°gina
    """
    import streamlit as st
    from utils.session_manager import inicializar_pagina_sistema

    def main():
        # 1. Configurar p√°gina
        st.set_page_config(
            page_title="Nome da P√°gina",
            page_icon="üî∂",
            layout="wide"
        )

        # 2. Verificar pr√©-requisitos b√°sicos
        if not inicializar_pagina_sistema():
            st.title("üî∂ Nome da P√°gina")
            st.error("‚ùå Pr√©-requisitos b√°sicos n√£o atendidos")

            # Bot√µes de navega√ß√£o padr√£o
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üè† P√°gina Principal"):
                    st.switch_page("Principal.py")
            with col2:
                if st.button("‚öôÔ∏è Configura√ß√µes"):
                    st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")

            return

        # 3. Verificar pr√©-requisitos espec√≠ficos (se necess√°rio)
        # prerequisitos_especificos = verificar_prerequisitos_especificos()
        # if not prerequisitos_especificos:
        #     return

        # 4. Continuar com a l√≥gica da p√°gina
        st.title("üî∂ Nome da P√°gina")
        st.success("‚úÖ Pr√©-requisitos atendidos")

        # Dados est√£o dispon√≠veis em:
        # - st.session_state.dados_inventario
        # - st.session_state.config_global

        # Implementar resto da p√°gina...

        # 5. Salvar resultados no session_state se necess√°rio
        # st.session_state.resultados_minha_pagina = resultados

    if __name__ == "__main__":
        main()


# FUN√á√ïES AUXILIARES PARA USO COMUM

def verificar_prerequisitos_especificos(prerequisitos_lista):
    """
    Verifica pr√©-requisitos espec√≠ficos de uma p√°gina

    Args:
        prerequisitos_lista: Lista de tuplas (key_session_state, nome_amigavel)

    Returns:
        bool: True se todos os pr√©-requisitos est√£o OK
    """
    faltando = []

    for key, nome in prerequisitos_lista:
        if key not in st.session_state or st.session_state[key] is None:
            faltando.append(nome)

    if faltando:
        st.warning(f"‚ö†Ô∏è Pr√©-requisitos faltando: {', '.join(faltando)}")
        return False

    return True


def botoes_navegacao_padrao():
    """Bot√µes de navega√ß√£o padr√£o para quando h√° problemas"""
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üè† P√°gina Principal", key="nav_principal_padrao"):
            st.switch_page("Principal.py")

    with col2:
        if st.button("‚öôÔ∏è Configura√ß√µes", key="nav_config_padrao"):
            st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")

    with col3:
        if st.button("üîÑ Recarregar", key="nav_reload_padrao"):
            st.rerun()


def mostrar_resumo_dados_disponiveis():
    """Mostra resumo dos dados dispon√≠veis na sess√£o"""
    if st.checkbox("üìä Resumo dos Dados Dispon√≠veis"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**üìã Dados B√°sicos:**")
            if 'dados_inventario' in st.session_state:
                dados = st.session_state.dados_inventario
                st.write(f"‚Ä¢ Registros: {len(dados)}")
                st.write(f"‚Ä¢ Talh√µes: {dados['talhao'].nunique()}")
                st.write(f"‚Ä¢ Colunas: {len(dados.columns)}")
            else:
                st.write("‚Ä¢ N√£o dispon√≠vel")

        with col2:
            st.write("**üéØ Resultados:**")
            resultados_keys = [k for k in st.session_state.keys() if 'resultado' in k.lower()]
            if resultados_keys:
                for key in resultados_keys:
                    st.write(f"‚Ä¢ {key}: ‚úÖ")
            else:
                st.write("‚Ä¢ Nenhum resultado salvo ainda")