# utils/session_manager.py - VERS√ÉO COMPLETA E FUNCIONAL
"""
Gerenciador completo do session_state - Vers√£o sem erros de import
"""

import streamlit as st
import pandas as pd
from typing import Optional, Tuple, List, Dict, Any


def verificar_dados_inventario() -> Tuple[bool, Optional[pd.DataFrame], List[str]]:
    """
    Verifica se dados de invent√°rio est√£o dispon√≠veis

    Returns:
        tuple: (dados_encontrados, dataframe, diagnosticos)
    """
    diagnosticos = []

    # Estrat√©gia 1: Verificar dados_inventario diretamente
    if hasattr(st.session_state, 'dados_inventario'):
        dados = st.session_state.dados_inventario
        if dados is not None and isinstance(dados, pd.DataFrame) and len(dados) > 0:
            # Verificar colunas necess√°rias
            colunas_necessarias = ['D_cm', 'H_m', 'talhao']
            colunas_presentes = [col for col in colunas_necessarias if col in dados.columns]

            if len(colunas_presentes) >= 3:
                diagnosticos.append(f"‚úÖ Dados encontrados em 'dados_inventario': {len(dados)} registros")
                return True, dados, diagnosticos
            else:
                diagnosticos.append(
                    f"‚ùå dados_inventario existe mas faltam colunas: {set(colunas_necessarias) - set(colunas_presentes)}")
        else:
            diagnosticos.append("‚ùå dados_inventario existe mas est√° vazio ou inv√°lido")
    else:
        diagnosticos.append("‚ùå dados_inventario n√£o encontrado")

    # Estrat√©gia 2: Buscar em outras keys
    diagnosticos.append("üîç Buscando dados em outras keys...")

    keys_candidatas = []
    for key in st.session_state.keys():
        if any(termo in key.lower() for termo in ['inventario', 'dados', 'df']):
            valor = st.session_state[key]
            if isinstance(valor, pd.DataFrame) and len(valor) > 0:
                keys_candidatas.append((key, valor))

    if keys_candidatas:
        diagnosticos.append(f"Encontradas {len(keys_candidatas)} keys candidatas")

        for key, dados in keys_candidatas:
            colunas_necessarias = ['D_cm', 'H_m', 'talhao']
            colunas_presentes = [col for col in colunas_necessarias if col in dados.columns]

            if len(colunas_presentes) >= 2:  # Crit√©rio mais flex√≠vel
                diagnosticos.append(f"‚úÖ Dados v√°lidos encontrados em '{key}': {len(dados)} registros")

                # Atualizar refer√™ncia principal
                st.session_state.dados_inventario = dados
                diagnosticos.append("üîÑ Refer√™ncia 'dados_inventario' atualizada")

                return True, dados, diagnosticos

    diagnosticos.append("‚ùå Nenhum dado de invent√°rio v√°lido encontrado")
    return False, None, diagnosticos


def verificar_configuracao() -> Tuple[bool, Optional[Dict], List[str]]:
    """
    Verifica se configura√ß√£o est√° dispon√≠vel

    Returns:
        tuple: (configurado, config_dict, diagnosticos)
    """
    diagnosticos = []

    if not hasattr(st.session_state, 'config_global'):
        diagnosticos.append("‚ùå config_global n√£o encontrada")
        return False, None, diagnosticos

    config = st.session_state.config_global

    if not isinstance(config, dict):
        diagnosticos.append("‚ùå config_global n√£o √© um dicion√°rio")
        return False, None, diagnosticos

    diagnosticos.append(f"‚úÖ config_global encontrada com {len(config)} keys")

    # Verificar se est√° marcada como configurada
    if config.get('configurado', False):
        diagnosticos.append("‚úÖ Marcada como configurada")
        return True, config, diagnosticos

    # Verificar se tem conte√∫do que indica configura√ß√£o
    keys_importantes = ['diametro_min', 'metodo_area', 'incluir_nao_lineares']
    keys_presentes = [key for key in keys_importantes if key in config]

    if len(keys_presentes) >= 2:
        diagnosticos.append(f"‚ö†Ô∏è Parece configurada ({len(keys_presentes)}/3 keys importantes) mas n√£o marcada")

        # Auto-corrigir
        try:
            config['configurado'] = True
            st.session_state.config_global = config
            diagnosticos.append("üîÑ Auto-corrigido flag 'configurado'")
            return True, config, diagnosticos
        except Exception as e:
            diagnosticos.append(f"‚ùå Erro ao auto-corrigir: {e}")
            return False, config, diagnosticos
    else:
        diagnosticos.append(f"‚ùå Configura√ß√£o incompleta (apenas {len(keys_presentes)}/3 keys importantes)")
        return False, config, diagnosticos


def sincronizar_flags() -> List[str]:
    """
    Sincroniza flags do session_state

    Returns:
        list: Corre√ß√µes aplicadas
    """
    correcoes = []

    try:
        # Verificar dados
        dados_ok, dados, _ = verificar_dados_inventario()

        if dados_ok:
            if not hasattr(st.session_state, 'arquivos_carregados') or not st.session_state.arquivos_carregados:
                st.session_state.arquivos_carregados = True
                correcoes.append("Flag 'arquivos_carregados' setada")
        else:
            if hasattr(st.session_state, 'arquivos_carregados') and st.session_state.arquivos_carregados:
                st.session_state.arquivos_carregados = False
                correcoes.append("Flag 'arquivos_carregados' limpa")

        # Verificar configura√ß√£o (j√° faz auto-corre√ß√£o interna)
        config_ok, _, _ = verificar_configuracao()

    except Exception as e:
        correcoes.append(f"Erro na sincroniza√ß√£o: {e}")

    return correcoes


def inicializar_pagina_sistema() -> bool:
    """
    Fun√ß√£o principal para inicializar qualquer p√°gina

    Returns:
        bool: True se pr√©-requisitos est√£o OK
    """
    try:
        # Sincronizar flags
        correcoes = sincronizar_flags()

        # Verificar status final
        dados_ok, _, _ = verificar_dados_inventario()
        config_ok, _, _ = verificar_configuracao()

        return dados_ok and config_ok

    except Exception as e:
        st.error(f"Erro na inicializa√ß√£o do sistema: {e}")
        return False


def mostrar_debug_sidebar():
    """Mostra debug na sidebar"""
    if st.sidebar.checkbox("üîç Debug Session State", key="debug_session_state"):
        st.sidebar.markdown("---")
        st.sidebar.subheader("üîß Debug")

        # Status dos dados
        dados_ok, dados, diag_dados = verificar_dados_inventario()

        if dados_ok:
            st.sidebar.success(f"‚úÖ Dados: {len(dados)} registros")
            st.sidebar.write(f"Talh√µes: {dados['talhao'].nunique()}")
        else:
            st.sidebar.error("‚ùå Dados n√£o encontrados")

        # Status da configura√ß√£o
        config_ok, config, diag_config = verificar_configuracao()

        if config_ok:
            st.sidebar.success("‚úÖ Configura√ß√£o OK")
            if config:
                st.sidebar.write(f"Keys: {len(config)}")
        else:
            st.sidebar.error("‚ùå N√£o configurado")

        # Diagn√≥sticos detalhados
        if st.sidebar.checkbox("üìã Diagn√≥stico Detalhado"):
            st.sidebar.write("**Dados:**")
            for diag in diag_dados[-3:]:
                st.sidebar.caption(diag)

            st.sidebar.write("**Config:**")
            for diag in diag_config[-3:]:
                st.sidebar.caption(diag)

        # Bot√£o para sincronizar
        if st.sidebar.button("üîÑ Sincronizar"):
            correcoes = sincronizar_flags()
            if correcoes:
                for correcao in correcoes:
                    st.sidebar.success(f"‚úÖ {correcao}")
                st.rerun()
            else:
                st.sidebar.info("‚ÑπÔ∏è J√° sincronizado")


def mostrar_pagina_erro():
    """Mostra p√°gina de erro padr√£o"""
    st.error("‚ùå Pr√©-requisitos n√£o atendidos")

    # Status visual
    dados_ok, dados, diag_dados = verificar_dados_inventario()
    config_ok, config, diag_config = verificar_configuracao()

    col1, col2 = st.columns(2)

    with col1:
        if dados_ok:
            st.success(f"‚úÖ Dados: {len(dados)} registros")
        else:
            st.error("‚ùå Dados n√£o carregados")

    with col2:
        if config_ok:
            st.success("‚úÖ Sistema configurado")
        else:
            st.error("‚ùå Sistema n√£o configurado")

    # Diagn√≥stico expandido
    with st.expander("üîç Diagn√≥stico Detalhado"):
        if not dados_ok:
            st.write("**‚ùå Problema com dados:**")
            for linha in diag_dados:
                st.write(f"‚Ä¢ {linha}")

            st.info("""
            **üí° Como resolver:**
            1. Volte √† p√°gina principal
            2. Fa√ßa upload dos arquivos de invent√°rio
            3. Certifique-se de que o upload foi conclu√≠do
            """)

        if not config_ok:
            st.write("**‚ùå Problema com configura√ß√£o:**")
            for linha in diag_config:
                st.write(f"‚Ä¢ {linha}")

            st.info("""
            **üí° Como resolver:**
            1. V√° para a p√°gina de Configura√ß√µes
            2. Configure todos os par√¢metros
            3. Clique em 'Salvar Configura√ß√µes'
            """)

    # Bot√µes de navega√ß√£o
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üè† P√°gina Principal", key="nav_principal"):
            st.switch_page("Principal.py")

    with col2:
        if st.button("‚öôÔ∏è Configura√ß√µes", key="nav_config"):
            st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")

    with col3:
        if st.button("üîÑ Recarregar", key="nav_reload"):
            st.rerun()


# FUN√á√ïES DE CONVENI√äNCIA

def obter_dados_inventario() -> Optional[pd.DataFrame]:
    """Obt√©m dados de invent√°rio de forma segura"""
    dados_ok, dados, _ = verificar_dados_inventario()
    return dados if dados_ok else None


def obter_configuracao() -> Optional[Dict]:
    """Obt√©m configura√ß√£o de forma segura"""
    config_ok, config, _ = verificar_configuracao()
    return config if config_ok else None


def prerequisitos_ok() -> bool:
    """Verifica se pr√©-requisitos est√£o OK"""
    return inicializar_pagina_sistema()


def mostrar_status_prerequisitos():
    """Mostra status visual dos pr√©-requisitos"""
    dados_ok, dados, _ = verificar_dados_inventario()
    config_ok, config, _ = verificar_configuracao()

    col1, col2 = st.columns(2)

    with col1:
        if dados_ok:
            st.success(f"‚úÖ Dados carregados ({len(dados)} registros)")
        else:
            st.error("‚ùå Dados n√£o carregados")

    with col2:
        if config_ok:
            st.success("‚úÖ Sistema configurado")
        else:
            st.error("‚ùå Sistema n√£o configurado")

    return dados_ok and config_ok


# FUN√á√ÉO PARA CORRE√á√ÉO MANUAL DE EMERG√äNCIA

def correcao_manual_emergencia():
    """Fun√ß√£o de emerg√™ncia para corrigir problemas manualmente"""
    if st.sidebar.button("üö® Corre√ß√£o de Emerg√™ncia"):
        try:
            # Buscar qualquer DataFrame que pare√ßa dados de invent√°rio
            for key in st.session_state.keys():
                valor = st.session_state[key]
                if isinstance(valor, pd.DataFrame) and len(valor) > 0:
                    # Verificar se tem pelo menos algumas colunas que indicam invent√°rio
                    colunas_inventario = ['D_cm', 'H_m', 'DAP', 'altura', 'diametro', 'talhao', 'parcela']
                    colunas_encontradas = [col for col in colunas_inventario if col in valor.columns]

                    if len(colunas_encontradas) >= 2:
                        st.session_state.dados_inventario = valor
                        st.session_state.arquivos_carregados = True
                        st.sidebar.success(f"‚úÖ Dados corrigidos de '{key}'")
                        st.sidebar.write(f"Colunas encontradas: {colunas_encontradas}")
                        break

            # Tentar corrigir configura√ß√£o
            if hasattr(st.session_state, 'config_global'):
                config = st.session_state.config_global
                if isinstance(config, dict) and len(config) > 0:
                    config['configurado'] = True
                    st.session_state.config_global = config
                    st.sidebar.success("‚úÖ Configura√ß√£o corrigida")

            st.rerun()

        except Exception as e:
            st.sidebar.error(f"‚ùå Erro na corre√ß√£o: {e}")


# EXEMPLO DE USO COMPLETO

def exemplo_uso_completo():
    """
    EXEMPLO COMPLETO de como usar na sua p√°gina:

    # No topo da sua p√°gina:
    from utils.session_manager import (
        inicializar_pagina_sistema,
        mostrar_pagina_erro,
        mostrar_debug_sidebar,
        correcao_manual_emergencia
    )

    def main():
        st.title("üå≥ Minha P√°gina")

        # Debug e corre√ß√£o de emerg√™ncia na sidebar
        mostrar_debug_sidebar()
        correcao_manual_emergencia()

        # Verificar pr√©-requisitos
        if not inicializar_pagina_sistema():
            mostrar_pagina_erro()
            return

        # Se chegou aqui, tudo OK!
        st.success("‚úÖ Sistema pronto")

        # Usar dados com seguran√ßa
        dados = st.session_state.dados_inventario
        config = st.session_state.config_global

        # Sua l√≥gica continua...
        st.write(f"Dados: {len(dados)} registros")
        st.write(f"Configura√ß√£o: {len(config)} par√¢metros")
    """
    pass