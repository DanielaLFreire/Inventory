# processors/areas.py
'''
Processamento de √°reas dos talh√µes usando diferentes m√©todos
'''

import pandas as pd
import numpy as np
import streamlit as st


def processar_areas_por_metodo(metodo, **kwargs):
    '''
    Processa √°reas dos talh√µes baseado no m√©todo selecionado

    Args:
        metodo: M√©todo de c√°lculo ('manual', 'shapefile', 'coordenadas', 'simulacao')
        **kwargs: Argumentos espec√≠ficos para cada m√©todo

    Returns:
        DataFrame com talhao e area_ha ou None se erro
    '''
    if metodo == 'manual':
        return processar_areas_manuais(kwargs.get('areas_dict'), kwargs.get('talhoes'))

    elif metodo == 'shapefile':
        return processar_shapefile_areas(kwargs.get('arquivo_shp'))

    elif metodo == 'coordenadas':
        return processar_coordenadas_areas(
            kwargs.get('arquivo_coord'),
            kwargs.get('raio_parcela')
        )

    elif metodo == 'simulacao':
        return processar_areas_simuladas(
            kwargs.get('df_inventario'),
            kwargs.get('config')
        )

    else:
        st.error(f"M√©todo '{metodo}' n√£o reconhecido")
        return None


def processar_areas_manuais(areas_dict, talhoes_lista):
    '''
    Processa √°reas informadas manualmente

    Args:
        areas_dict: Dicion√°rio {talhao: area_ha}
        talhoes_lista: Lista de talh√µes dispon√≠veis

    Returns:
        DataFrame com √°reas manuais
    '''
    try:
        if not areas_dict:
            st.error("‚ùå Nenhuma √°rea manual foi informada")
            return None

        # Criar DataFrame a partir do dicion√°rio
        df_areas = pd.DataFrame([
            {'talhao': int(talhao), 'area_ha': float(area)}
            for talhao, area in areas_dict.items()
        ])

        # Verificar se todos os talh√µes t√™m √°rea
        talhoes_sem_area = set(talhoes_lista) - set(df_areas['talhao'])
        if talhoes_sem_area:
            st.warning(f"‚ö†Ô∏è Talh√µes sem √°rea informada: {list(talhoes_sem_area)}")

            # Adicionar √°rea padr√£o para talh√µes faltantes
            for talhao in talhoes_sem_area:
                df_areas = pd.concat([
                    df_areas,
                    pd.DataFrame({'talhao': [int(talhao)], 'area_ha': [25.0]})
                ], ignore_index=True)

        st.success(f"‚úÖ √Åreas manuais configuradas para {len(df_areas)} talh√µes")

        return df_areas

    except Exception as e:
        st.error(f"‚ùå Erro ao processar √°reas manuais: {e}")
        return None


def processar_shapefile_areas(arquivo_shp):
    '''
    Processa shapefile para extrair √°reas dos talh√µes

    Args:
        arquivo_shp: Arquivo shapefile carregado

    Returns:
        DataFrame com talhao e area_ha ou None se erro
    '''
    try:
        import geopandas as gpd
        import zipfile
        import tempfile
        import os

        if arquivo_shp.name.endswith('.zip'):
            # Processar arquivo ZIP com shapefile
            with tempfile.TemporaryDirectory() as temp_dir:
                with zipfile.ZipFile(arquivo_shp, 'r') as zip_ref:
                    zip_ref.extractall(temp_dir)

                # Procurar arquivo .shp
                shp_files = [f for f in os.listdir(temp_dir) if f.endswith('.shp')]
                if not shp_files:
                    raise Exception("Arquivo .shp n√£o encontrado no ZIP")

                shp_path = os.path.join(temp_dir, shp_files[0])
                gdf = gpd.read_file(shp_path)
        else:
            # Arquivo .shp direto
            gdf = gpd.read_file(arquivo_shp)

        # Extrair √°reas do GeoDataFrame
        df_areas = extrair_areas_geodataframe(gdf)

        if df_areas is not None:
            st.success(f"‚úÖ √Åreas extra√≠das do shapefile: {len(df_areas)} talh√µes")

        return df_areas

    except ImportError:
        st.error("‚ùå GeoPandas n√£o est√° instalado")
        st.code("pip install geopandas")
        return None

    except Exception as e:
        st.error(f"‚ùå Erro ao processar shapefile: {e}")
        st.info("üí° Verifique se o arquivo cont√©m colunas 'talhao' e 'area_ha'")
        return None


def extrair_areas_geodataframe(gdf):
    '''
    Extrai √°reas dos talh√µes do GeoDataFrame

    Args:
        gdf: GeoDataFrame do shapefile

    Returns:
        DataFrame com talhao e area_ha
    '''
    # Procurar coluna de talh√£o (varia√ß√µes poss√≠veis)
    colunas_talhao_possiveis = ['talhao', 'talh√£o', 'talh', 'plot', 'stand', 'id', 'ID']
    col_talhao = None

    for col in gdf.columns:
        if col.lower() in [c.lower() for c in colunas_talhao_possiveis]:
            col_talhao = col
            break

    if col_talhao is None:
        raise Exception("Coluna de talh√£o n√£o encontrada. Procuradas: " + str(colunas_talhao_possiveis))

    # Procurar coluna de √°rea
    colunas_area_possiveis = ['area_ha', 'area', 'hectares', 'ha', 'area_m2', 'superficie']
    col_area = None

    for col in gdf.columns:
        if col.lower() in [c.lower() for c in colunas_area_possiveis]:
            col_area = col
            break

    if col_area is None:
        # Calcular √°rea da geometria se n√£o existe coluna espec√≠fica
        try:
            # Verificar se geometria est√° em coordenadas geogr√°ficas
            if gdf.crs and gdf.crs.is_geographic:
                # Converter para proje√ß√£o adequada (UTM ou similar)
                gdf_proj = gdf.to_crs('EPSG:3857')  # Web Mercator
                gdf['area_calculada'] = gdf_proj.geometry.area / 10000  # m¬≤ para ha
            else:
                gdf['area_calculada'] = gdf.geometry.area / 10000  # Assumir que j√° est√° em metros

            col_area = 'area_calculada'
            st.info("‚ÑπÔ∏è √Årea calculada automaticamente da geometria")

        except Exception as e:
            raise Exception(f"N√£o foi poss√≠vel calcular √°rea da geometria: {e}")

    # Agrupar por talh√£o e somar √°reas (caso existam m√∫ltiplos pol√≠gonos por talh√£o)
    try:
        df_areas = gdf.groupby(col_talhao)[col_area].sum().reset_index()
        df_areas.columns = ['talhao', 'area_ha']

        # Converter talh√£o para inteiro
        df_areas['talhao'] = pd.to_numeric(df_areas['talhao'], errors='coerce').astype('Int64')

        # Remover linhas com talh√£o inv√°lido
        df_areas = df_areas.dropna(subset=['talhao'])

        # Converter √°rea para float e garantir valores positivos
        df_areas['area_ha'] = pd.to_numeric(df_areas['area_ha'], errors='coerce')
        df_areas = df_areas[df_areas['area_ha'] > 0]

        if len(df_areas) == 0:
            raise Exception("Nenhuma √°rea v√°lida encontrada no shapefile")

        return df_areas

    except Exception as e:
        raise Exception(f"Erro ao processar dados do shapefile: {e}")


def processar_coordenadas_areas(arquivo_coord, raio_parcela):
    '''
    Processa coordenadas para calcular √°reas dos talh√µes

    Args:
        arquivo_coord: Arquivo com coordenadas das parcelas
        raio_parcela: Raio da parcela em metros

    Returns:
        DataFrame com talhao e area_ha
    '''
    try:
        from utils.arquivo_handler import carregar_arquivo

        # Carregar arquivo de coordenadas
        df_coord = carregar_arquivo(arquivo_coord)
        if df_coord is None:
            return None

        # Verificar colunas de coordenadas
        colunas_coord = None
        coord_possiveis = [['x', 'y'], ['X', 'Y'], ['lon', 'lat'], ['longitude', 'latitude']]

        for coord_set in coord_possiveis:
            if all(col in df_coord.columns for col in coord_set):
                colunas_coord = coord_set
                break

        if not colunas_coord:
            st.error("‚ùå Colunas de coordenadas n√£o encontradas. Esperadas: X,Y ou lon,lat")
            return None

        # Verificar coluna de talh√£o
        colunas_talhao_possiveis = ['talhao', 'talh√£o', 'talh', 'plot', 'stand']
        col_talhao = None

        for col in df_coord.columns:
            if col.lower() in [c.lower() for c in colunas_talhao_possiveis]:
                col_talhao = col
                break

        if col_talhao is None:
            st.error("‚ùå Coluna de talh√£o n√£o encontrada nas coordenadas")
            return None

        # Calcular √°rea circular da parcela
        area_parcela_ha = np.pi * (raio_parcela ** 2) / 10000  # Converter m¬≤ para ha

        # Contar parcelas por talh√£o
        parcelas_por_talhao = df_coord.groupby(col_talhao).size().reset_index()
        parcelas_por_talhao.columns = ['talhao', 'num_parcelas']

        # Calcular √°rea total do talh√£o
        parcelas_por_talhao['area_ha'] = parcelas_por_talhao['num_parcelas'] * area_parcela_ha

        # Preparar DataFrame final
        df_areas = parcelas_por_talhao[['talhao', 'area_ha']].copy()
        df_areas['talhao'] = df_areas['talhao'].astype(int)

        st.success(f"‚úÖ √Åreas calculadas das coordenadas: {len(df_areas)} talh√µes")
        st.info(f"üìê √Årea por parcela: {area_parcela_ha:.4f} ha (raio {raio_parcela}m)")

        return df_areas

    except Exception as e:
        st.error(f"‚ùå Erro ao processar coordenadas: {e}")
        return None


def processar_areas_simuladas(df_inventario, config):
    '''
    Simula √°reas real√≠sticas para os talh√µes

    Args:
        df_inventario: DataFrame do invent√°rio
        config: Configura√ß√µes do sistema

    Returns:
        DataFrame com √°reas simuladas
    '''
    try:
        talhoes_unicos = sorted(df_inventario['talhao'].unique())
        area_parcela_m2 = config.get('area_parcela', 400)

        # Configura√ß√µes de simula√ß√£o
        fator_min = config.get('simulacao_fator_min', 2.5)
        fator_max = config.get('simulacao_fator_max', 4.0)
        variacao = config.get('simulacao_variacao', 0.2)

        # Calcular √°reas baseadas no n√∫mero de parcelas
        areas_calculadas = []

        # Definir seed para reprodutibilidade
        np.random.seed(42)

        for talhao in talhoes_unicos:
            # Contar parcelas √∫nicas no talh√£o
            parcelas_talhao = df_inventario[df_inventario['talhao'] == talhao]['parcela'].nunique()

            # M√©todo 1: Baseado no n√∫mero de parcelas (mais real√≠stico)
            if parcelas_talhao > 0:
                # Assumir que cada parcela representa uma amostra de fator_min a fator_max hectares
                fator_expansao = np.random.uniform(fator_min, fator_max)
                area_estimada = parcelas_talhao * fator_expansao
            else:
                area_estimada = 25.0  # √Årea padr√£o

            # Adicionar varia√ß√£o real√≠stica
            multiplicador_variacao = np.random.uniform(1 - variacao, 1 + variacao)
            area_final = area_estimada * multiplicador_variacao

            # Arredondar para valores real√≠sticos
            area_final = round(area_final, 1)

            # Garantir m√≠nimo e m√°ximo real√≠sticos
            area_final = max(5.0, min(area_final, 200.0))

            areas_calculadas.append({
                'talhao': talhao,
                'area_ha': area_final,
                'parcelas': parcelas_talhao,
                'fator_expansao': fator_expansao
            })

        df_areas = pd.DataFrame(areas_calculadas)[['talhao', 'area_ha']]

        st.success(f"‚úÖ √Åreas simuladas para {len(df_areas)} talh√µes")
        st.info("üé≤ Simula√ß√£o baseada no n√∫mero de parcelas por talh√£o")

        # Mostrar resumo da simula√ß√£o
        with st.expander("üìä Resumo da Simula√ß√£o de √Åreas"):
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("√Årea Total", f"{df_areas['area_ha'].sum():.1f} ha")
            with col2:
                st.metric("√Årea M√©dia", f"{df_areas['area_ha'].mean():.1f} ha")
            with col3:
                st.metric("Varia√ß√£o", f"{df_areas['area_ha'].min():.1f} - {df_areas['area_ha'].max():.1f} ha")

            # Mostrar detalhes por talh√£o
            df_detalhes = pd.DataFrame(areas_calculadas)
            df_detalhes_formatado = df_detalhes.round(2)
            st.dataframe(df_detalhes_formatado, hide_index=True)

        return df_areas

    except Exception as e:
        st.error(f"‚ùå Erro ao simular √°reas: {e}")
        return None


def validar_areas_processadas(df_areas, df_inventario):
    '''
    Valida as √°reas processadas

    Args:
        df_areas: DataFrame com √°reas dos talh√µes
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Resultado da valida√ß√£o
    '''
    validacao = {
        'valido': True,
        'alertas': [],
        'erros': []
    }

    try:
        # Verificar se DataFrame n√£o est√° vazio
        if df_areas is None or len(df_areas) == 0:
            validacao['erros'].append("Nenhuma √°rea foi processada")
            validacao['valido'] = False
            return validacao

        # Verificar colunas obrigat√≥rias
        if not all(col in df_areas.columns for col in ['talhao', 'area_ha']):
            validacao['erros'].append("Colunas obrigat√≥rias faltantes: talhao, area_ha")
            validacao['valido'] = False
            return validacao

        # Verificar valores v√°lidos
        areas_invalidas = df_areas[df_areas['area_ha'] <= 0]
        if len(areas_invalidas) > 0:
            validacao['erros'].append(f"√Åreas inv√°lidas (‚â§0) encontradas: {len(areas_invalidas)} talh√µes")
            validacao['valido'] = False

        # Verificar valores extremos
        area_max = df_areas['area_ha'].max()
        area_min = df_areas['area_ha'].min()

        if area_max > 500:
            validacao['alertas'].append(f"√Årea muito grande detectada: {area_max:.1f} ha")

        if area_min < 1:
            validacao['alertas'].append(f"√Årea muito pequena detectada: {area_min:.1f} ha")

        # Verificar se todos os talh√µes do invent√°rio t√™m √°rea
        talhoes_inventario = set(df_inventario['talhao'].unique())
        talhoes_areas = set(df_areas['talhao'].unique())

        talhoes_sem_area = talhoes_inventario - talhoes_areas
        if talhoes_sem_area:
            validacao['alertas'].append(f"Talh√µes sem √°rea definida: {list(talhoes_sem_area)}")

        talhoes_sem_inventario = talhoes_areas - talhoes_inventario
        if talhoes_sem_inventario:
            validacao['alertas'].append(f"√Åreas sem dados de invent√°rio: {list(talhoes_sem_inventario)}")

        # Verificar distribui√ß√£o das √°reas
        cv_areas = (df_areas['area_ha'].std() / df_areas['area_ha'].mean()) * 100
        if cv_areas > 100:
            validacao['alertas'].append(f"Alta variabilidade nas √°reas: CV = {cv_areas:.1f}%")

        # Verificar duplicatas
        duplicatas = df_areas[df_areas.duplicated(subset=['talhao'])]
        if len(duplicatas) > 0:
            validacao['erros'].append(f"Talh√µes duplicados encontrados: {duplicatas['talhao'].tolist()}")
            validacao['valido'] = False

        # Verificar valores nulos
        nulos_talhao = df_areas['talhao'].isna().sum()
        nulos_area = df_areas['area_ha'].isna().sum()

        if nulos_talhao > 0:
            validacao['erros'].append(f"Valores nulos em 'talhao': {nulos_talhao}")
            validacao['valido'] = False

        if nulos_area > 0:
            validacao['erros'].append(f"Valores nulos em 'area_ha': {nulos_area}")
            validacao['valido'] = False

    except Exception as e:
        validacao['erros'].append(f"Erro na valida√ß√£o: {e}")
        validacao['valido'] = False

    return validacao


def gerar_resumo_areas(df_areas, metodo_utilizado):
    '''
    Gera resumo das √°reas processadas

    Args:
        df_areas: DataFrame com √°reas dos talh√µes
        metodo_utilizado: M√©todo usado para calcular as √°reas

    Returns:
        dict: Resumo das √°reas
    '''
    resumo = {
        'metodo': metodo_utilizado,
        'total_talhoes': len(df_areas),
        'area_total_ha': df_areas['area_ha'].sum(),
        'area_media_ha': df_areas['area_ha'].mean(),
        'area_min_ha': df_areas['area_ha'].min(),
        'area_max_ha': df_areas['area_ha'].max(),
        'cv_areas': (df_areas['area_ha'].std() / df_areas['area_ha'].mean()) * 100,
        'mediana_ha': df_areas['area_ha'].median()
    }

    # Classifica√ß√£o dos talh√µes por tamanho
    q33 = df_areas['area_ha'].quantile(0.33)
    q67 = df_areas['area_ha'].quantile(0.67)

    resumo['pequenos'] = (df_areas['area_ha'] < q33).sum()
    resumo['medios'] = ((df_areas['area_ha'] >= q33) & (df_areas['area_ha'] < q67)).sum()
    resumo['grandes'] = (df_areas['area_ha'] >= q67).sum()
    resumo['q33'] = q33
    resumo['q67'] = q67

    # Estat√≠sticas adicionais
    resumo['desvio_padrao'] = df_areas['area_ha'].std()
    resumo['amplitude'] = resumo['area_max_ha'] - resumo['area_min_ha']

    return resumo


def exportar_areas_para_csv(df_areas, metodo):
    '''
    Prepara DataFrame de √°reas para exporta√ß√£o

    Args:
        df_areas: DataFrame com √°reas
        metodo: M√©todo utilizado

    Returns:
        str: CSV formatado para download
    '''
    df_export = df_areas.copy()

    # Adicionar informa√ß√µes adicionais
    df_export['metodo_calculo'] = metodo
    df_export['data_processamento'] = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')

    # Adicionar estat√≠sticas por talh√£o
    df_export['percentil_area'] = df_export['area_ha'].rank(pct=True) * 100
    df_export['classificacao_tamanho'] = pd.cut(
        df_export['area_ha'],
        bins=3,
        labels=['Pequeno', 'M√©dio', 'Grande']
    )

    # Reordenar colunas
    colunas_ordenadas = [
        'talhao', 'area_ha', 'percentil_area', 'classificacao_tamanho',
        'metodo_calculo', 'data_processamento'
    ]
    df_export = df_export[colunas_ordenadas]

    # Renomear colunas para portugu√™s
    df_export = df_export.rename(columns={
        'talhao': 'Talh√£o',
        'area_ha': '√Årea (ha)',
        'percentil_area': 'Percentil √Årea (%)',
        'classificacao_tamanho': 'Classifica√ß√£o Tamanho',
        'metodo_calculo': 'M√©todo de C√°lculo',
        'data_processamento': 'Data Processamento'
    })

    return df_export.to_csv(index=False)


def criar_interface_areas_configuracao():
    '''
    Cria interface para configura√ß√£o de √°reas (para usar em ui/configuracoes.py)

    Returns:
        dict: Configura√ß√µes de √°rea selecionadas
    '''
    st.subheader("üìè Configura√ß√µes de √Årea")

    col1, col2, col3 = st.columns(3)

    with col1:
        metodo_area = st.selectbox(
            "üó∫Ô∏è M√©todo para √Årea dos Talh√µes",
            [
                "Simular automaticamente",
                "Valores informados manualmente",
                "Upload shapefile",
                "Coordenadas das parcelas"
            ],
            help="Como calcular as √°reas dos talh√µes"
        )

    with col2:
        area_parcela = st.number_input(
            "üìê √Årea da Parcela (m¬≤)",
            min_value=100,
            max_value=2000,
            value=400,
            step=100,
            help="√Årea padr√£o: 400m¬≤ (20x20m)"
        )

    with col3:
        if metodo_area == "Coordenadas das parcelas":
            raio_parcela = st.number_input(
                "üìê Raio da Parcela (m)",
                min_value=5.0,
                max_value=30.0,
                value=11.28,
                step=0.1,
                help="Raio para calcular √°rea circular"
            )
            area_calculada = np.pi * (raio_parcela ** 2)
            st.write(f"**√Årea**: {area_calculada:.0f} m¬≤")
        else:
            raio_parcela = 11.28  # Valor padr√£o

    # Configura√ß√µes espec√≠ficas por m√©todo
    config_especifica = {}

    if metodo_area == "Valores informados manualmente":
        st.write("**üìù Informe as √°reas por talh√£o:**")
        st.info("üí° As √°reas ser√£o coletadas na interface principal")
        config_especifica['tipo'] = 'manual'

    elif metodo_area == "Upload shapefile":
        st.success("üìÅ Shapefile ser√° processado automaticamente")
        config_especifica['tipo'] = 'shapefile'

    elif metodo_area == "Coordenadas das parcelas":
        st.success("üìç Coordenadas ser√£o processadas automaticamente")
        config_especifica['tipo'] = 'coordenadas'
        config_especifica['raio_parcela'] = raio_parcela

    else:
        st.info("üé≤ √Åreas ser√£o simuladas baseadas no n√∫mero de parcelas")
        config_especifica['tipo'] = 'simulacao'

    return {
        'metodo_area': metodo_area,
        'area_parcela': area_parcela,
        'raio_parcela': raio_parcela,
        'config_especifica': config_especifica
    }


def mostrar_estatisticas_areas(df_areas):
    '''
    Mostra estat√≠sticas das √°reas processadas

    Args:
        df_areas: DataFrame com √°reas dos talh√µes
    '''
    st.subheader("üìä Estat√≠sticas das √Åreas")

    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Total de Talh√µes", len(df_areas))

    with col2:
        st.metric("√Årea Total", f"{df_areas['area_ha'].sum():.1f} ha")

    with col3:
        st.metric("√Årea M√©dia", f"{df_areas['area_ha'].mean():.1f} ha")

    with col4:
        cv = (df_areas['area_ha'].std() / df_areas['area_ha'].mean()) * 100
        st.metric("CV", f"{cv:.1f}%")

    # Distribui√ß√£o
    col1, col2 = st.columns(2)

    with col1:
        st.write("**Distribui√ß√£o por Tamanho:**")
        q33 = df_areas['area_ha'].quantile(0.33)
        q67 = df_areas['area_ha'].quantile(0.67)

        pequenos = (df_areas['area_ha'] < q33).sum()
        medios = ((df_areas['area_ha'] >= q33) & (df_areas['area_ha'] < q67)).sum()
        grandes = (df_areas['area_ha'] >= q67).sum()

        st.write(f"- Pequenos (< {q33:.1f} ha): {pequenos} talh√µes")
        st.write(f"- M√©dios ({q33:.1f} - {q67:.1f} ha): {medios} talh√µes")
        st.write(f"- Grandes (‚â• {q67:.1f} ha): {grandes} talh√µes")

    with col2:
        st.write("**Estat√≠sticas Descritivas:**")
        st.write(f"- M√≠nimo: {df_areas['area_ha'].min():.1f} ha")
        st.write(f"- M√°ximo: {df_areas['area_ha'].max():.1f} ha")
        st.write(f"- Mediana: {df_areas['area_ha'].median():.1f} ha")
        st.write(f"- Desvio padr√£o: {df_areas['area_ha'].std():.1f} ha")


def gerar_relatorio_areas(df_areas, metodo, validacao=None):
    '''
    Gera relat√≥rio das √°reas processadas

    Args:
        df_areas: DataFrame com √°reas
        metodo: M√©todo utilizado
        validacao: Resultado da valida√ß√£o (opcional)

    Returns:
        str: Relat√≥rio em markdown
    '''
    resumo = gerar_resumo_areas(df_areas, metodo)

    relatorio = f'''
                # RELAT√ìRIO DE √ÅREAS DOS TALH√ïES
                
                ## Informa√ß√µes Gerais
                - **Data/Hora**: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}
                - **M√©todo utilizado**: {metodo}
                - **Total de talh√µes**: {resumo['total_talhoes']}
                
                ## Estat√≠sticas das √Åreas
                - **√Årea total**: {resumo['area_total_ha']:.1f} ha
                - **√Årea m√©dia**: {resumo['area_media_ha']:.1f} ha
                - **√Årea m√≠nima**: {resumo['area_min_ha']:.1f} ha
                - **√Årea m√°xima**: {resumo['area_max_ha']:.1f} ha
                - **Mediana**: {resumo['mediana_ha']:.1f} ha
                - **Desvio padr√£o**: {resumo['desvio_padrao']:.1f} ha
                - **Coeficiente de varia√ß√£o**: {resumo['cv_areas']:.1f}%
                
                ## Distribui√ß√£o por Tamanho
                - **Talh√µes pequenos** (< {resumo['q33']:.1f} ha): {resumo['pequenos']} talh√µes
                - **Talh√µes m√©dios** ({resumo['q33']:.1f} - {resumo['q67']:.1f} ha): {resumo['medios']} talh√µes  
                - **Talh√µes grandes** (‚â• {resumo['q67']:.1f} ha): {resumo['grandes']} talh√µes
                
                ## M√©todo Espec√≠fico
                '''

    if metodo == "Simular automaticamente":
        relatorio += '''
                ### Simula√ß√£o Autom√°tica
                - Baseada no n√∫mero de parcelas por talh√£o
                - Fator de expans√£o: 2,5 a 4,0 ha por parcela
                - Varia√ß√£o aleat√≥ria aplicada: ¬±20%
                - Seed fixo para reprodutibilidade
                '''
    elif metodo == "Upload shapefile":
        relatorio += '''
                    ### Shapefile
                    - √Åreas extra√≠das da geometria dos pol√≠gonos
                    - Agrupamento autom√°tico por talh√£o
                    - Convers√£o para hectares quando necess√°rio
                    '''
    elif metodo == "Coordenadas das parcelas":
        relatorio += '''
                    ### Coordenadas das Parcelas
                    - C√°lculo baseado em parcelas circulares
                    - Contagem de parcelas por talh√£o
                    - √Årea expandida conforme raio definido
                    '''
    elif metodo == "Valores informados manualmente":
        relatorio += '''
                    ### Entrada Manual
                    - √Åreas informadas diretamente pelo usu√°rio
                    - Valores validados antes do processamento
                    '''

    # Adicionar valida√ß√£o se dispon√≠vel
    if validacao:
        relatorio += f'''
                        ## Valida√ß√£o
                        - **Status**: {'‚úÖ V√°lido' if validacao['valido'] else '‚ùå Inv√°lido'}
                        '''
        if validacao['alertas']:
            relatorio += "### Alertas:\n"
            for alerta in validacao['alertas']:
                relatorio += f"- ‚ö†Ô∏è {alerta}\n"

        if validacao['erros']:
            relatorio += "### Erros:\n"
            for erro in validacao['erros']:
                relatorio += f"- ‚ùå {erro}\n"

    relatorio += '''
                ---
                *Relat√≥rio gerado pelo Sistema Modular de Invent√°rio Florestal*
                '''

    return relatorio

    if len(df_areas) == 0:
        raise Exception("Nenhuma √°rea v√°lida encontrada no shapefile")

    return df_areas




def processar_coordenadas_areas(arquivo_coord, raio_parcela):
    '''
    Processa coordenadas para calcular √°reas dos talh√µes

    Args:
        arquivo_coord: Arquivo com coordenadas das parcelas
        raio_parcela: Raio da parcela em metros

    Returns:'
        DataFrame com talhao e area_ha
    '''
    try:
        from utils.arquivo_handler import carregar_arquivo

        # Carregar arquivo de coordenadas
        df_coord = carregar_arquivo(arquivo_coord)
        if df_coord is None:
            return None

        # Verificar colunas de coordenadas
        colunas_coord = None
        coord_possiveis = [['x', 'y'], ['X', 'Y'], ['lon', 'lat'], ['longitude', 'latitude']]

        for coord_set in coord_possiveis:
            if all(col in df_coord.columns for col in coord_set):
                colunas_coord = coord_set
                break

        if not colunas_coord:
            st.error("‚ùå Colunas de coordenadas n√£o encontradas. Esperadas: X,Y ou lon,lat")
            return None

        # Verificar coluna de talh√£o
        colunas_talhao_possiveis = ['talhao', 'talh√£o', 'talh', 'plot', 'stand']
        col_talhao = None

        for col in df_coord.columns:
            if col.lower() in [c.lower() for c in colunas_talhao_possiveis]:
                col_talhao = col
                break

        if col_talhao is None:
            st.error("‚ùå Coluna de talh√£o n√£o encontrada nas coordenadas")
            return None

        # Calcular √°rea circular da parcela
        area_parcela_ha = np.pi * (raio_parcela ** 2) / 10000  # Converter m¬≤ para ha

        # Contar parcelas por talh√£o
        parcelas_por_talhao = df_coord.groupby(col_talhao).size().reset_index()
        parcelas_por_talhao.columns = ['talhao', 'num_parcelas']

        # Calcular √°rea total do talh√£o
        parcelas_por_talhao['area_ha'] = parcelas_por_talhao['num_parcelas'] * area_parcela_ha

        # Preparar DataFrame final
        df_areas = parcelas_por_talhao[['talhao', 'area_ha']].copy()
        df_areas['talhao'] = df_areas['talhao'].astype(int)

        st.success(f"‚úÖ √Åreas calculadas das coordenadas: {len(df_areas)} talh√µes")
        st.info(f"üìê √Årea por parcela: {area_parcela_ha:.4f} ha (raio {raio_parcela}m)")

        return df_areas

    except Exception as e:
        st.error(f"‚ùå Erro ao processar coordenadas: {e}")
        return None


def processar_areas_simuladas(df_inventario, config):
    '''
    Simula √°reas real√≠sticas para os talh√µes

    Args:
        df_inventario: DataFrame do invent√°rio
        config: Configura√ß√µes do sistema

    Returns:
        DataFrame com √°reas simuladas
    '''
    try:
        talhoes_unicos = sorted(df_inventario['talhao'].unique())
        area_parcela_m2 = config.get('area_parcela', 400)

        # Calcular √°reas baseadas no n√∫mero de parcelas
        areas_calculadas = []

        for talhao in talhoes_unicos:
            # Contar parcelas √∫nicas no talh√£o
            parcelas_talhao = df_inventario[df_inventario['talhao'] == talhao]['parcela'].nunique()

            # M√©todo 1: Baseado no n√∫mero de parcelas (mais real√≠stico)
            if parcelas_talhao > 0:
                # Assumir que cada parcela representa uma amostra de 2-5 hectares
                fator_expansao = np.random.uniform(2.0, 5.0)
                area_estimada = parcelas_talhao * fator_expansao
            else:
                area_estimada = 25.0  # √Årea padr√£o

            # Adicionar varia√ß√£o real√≠stica (¬±20%)
            variacao = np.random.uniform(0.8, 1.2)
            area_final = area_estimada * variacao

            # Arredondar para valores real√≠sticos
            area_final = round(area_final, 1)

            # Garantir m√≠nimo e m√°ximo real√≠sticos
            area_final = max(5.0, min(area_final, 200.0))

            areas_calculadas.append({
                'talhao': talhao,
                'area_ha': area_final,
                'parcelas': parcelas_talhao
            })

        df_areas = pd.DataFrame(areas_calculadas)[['talhao', 'area_ha']]

        st.success(f"‚úÖ √Åreas simuladas para {len(df_areas)} talh√µes")
        st.info("üé≤ Simula√ß√£o baseada no n√∫mero de parcelas por talh√£o")

        # Mostrar resumo da simula√ß√£o
        with st.expander("üìä Resumo da Simula√ß√£o de √Åreas"):
            st.write(f"**√Årea total**: {df_areas['area_ha'].sum():.1f} ha")
            st.write(f"**√Årea m√©dia por talh√£o**: {df_areas['area_ha'].mean():.1f} ha")
            st.write(f"**Varia√ß√£o**: {df_areas['area_ha'].min():.1f} - {df_areas['area_ha'].max():.1f} ha")

        return df_areas

    except Exception as e:
        st.error(f"‚ùå Erro ao simular √°reas: {e}")
        return None


def validar_areas_processadas(df_areas, df_inventario):
    '''
    Valida as √°reas processadas

    Args:
        df_areas: DataFrame com √°reas dos talh√µes
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Resultado da valida√ß√£o
    '''
    validacao = {
        'valido': True,
        'alertas': [],
        'erros': []
    }

    try:
        # Verificar se DataFrame n√£o est√° vazio
        if df_areas is None or len(df_areas) == 0:
            validacao['erros'].append("Nenhuma √°rea foi processada")
            validacao['valido'] = False
            return validacao

        # Verificar colunas obrigat√≥rias
        if not all(col in df_areas.columns for col in ['talhao', 'area_ha']):
            validacao['erros'].append("Colunas obrigat√≥rias faltantes: talhao, area_ha")
            validacao['valido'] = False
            return validacao

        # Verificar valores v√°lidos
        areas_invalidas = df_areas[df_areas['area_ha'] <= 0]
        if len(areas_invalidas) > 0:
            validacao['erros'].append(f"√Åreas inv√°lidas (‚â§0) encontradas: {len(areas_invalidas)} talh√µes")
            validacao['valido'] = False

        # Verificar valores extremos
        area_max = df_areas['area_ha'].max()
        area_min = df_areas['area_ha'].min()

        if area_max > 500:
            validacao['alertas'].append(f"√Årea muito grande detectada: {area_max:.1f} ha")

        if area_min < 1:
            validacao['alertas'].append(f"√Årea muito pequena detectada: {area_min:.1f} ha")

        # Verificar se todos os talh√µes do invent√°rio t√™m √°rea
        talhoes_inventario = set(df_inventario['talhao'].unique())
        talhoes_areas = set(df_areas['talhao'].unique())

        talhoes_sem_area = talhoes_inventario - talhoes_areas
        if talhoes_sem_area:
            validacao['alertas'].append(f"Talh√µes sem √°rea definida: {list(talhoes_sem_area)}")

        talhoes_sem_inventario = talhoes_areas - talhoes_inventario
        if talhoes_sem_inventario:
            validacao['alertas'].append(f"√Åreas sem dados de invent√°rio: {list(talhoes_sem_inventario)}")

        # Verificar distribui√ß√£o das √°reas
        cv_areas = (df_areas['area_ha'].std() / df_areas['area_ha'].mean()) * 100
        if cv_areas > 100:
            validacao['alertas'].append(f"Alta variabilidade nas √°reas: CV = {cv_areas:.1f}%")

    except Exception as e:
        validacao['erros'].append(f"Erro na valida√ß√£o: {e}")
        validacao['valido'] = False

    return validacao


def gerar_resumo_areas(df_areas, metodo_utilizado):
    '''
    Gera resumo das √°reas processadas

    Args:
        df_areas: DataFrame com √°reas dos talh√µes
        metodo_utilizado: M√©todo usado para calcular as √°reas

    Returns:
        dict: Resumo das √°reas
    '''
    resumo = {
        'metodo': metodo_utilizado,
        'total_talhoes': len(df_areas),
        'area_total_ha': df_areas['area_ha'].sum(),
        'area_media_ha': df_areas['area_ha'].mean(),
        'area_min_ha': df_areas['area_ha'].min(),
        'area_max_ha': df_areas['area_ha'].max(),
        'cv_areas': (df_areas['area_ha'].std() / df_areas['area_ha'].mean()) * 100
    }

    # Classifica√ß√£o dos talh√µes por tamanho
    q33 = df_areas['area_ha'].quantile(0.33)
    q67 = df_areas['area_ha'].quantile(0.67)

    resumo['pequenos'] = (df_areas['area_ha'] < q33).sum()
    resumo['medios'] = ((df_areas['area_ha'] >= q33) & (df_areas['area_ha'] < q67)).sum()
    resumo['grandes'] = (df_areas['area_ha'] >= q67).sum()
    resumo['q33'] = q33
    resumo['q67'] = q67

    return resumo


def exportar_areas_para_csv(df_areas, metodo):
    '''
    Prepara DataFrame de √°reas para exporta√ß√£o

    Args:
        df_areas: DataFrame com √°reas
        metodo: M√©todo utilizado

    Returns:
        str: CSV formatado para download
    '''
    df_export = df_areas.copy()

    # Adicionar informa√ß√µes adicionais
    df_export['metodo_calculo'] = metodo
    df_export['data_processamento'] = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')

    # Reordenar colunas
    df_export = df_export[['talhao', 'area_ha', 'metodo_calculo', 'data_processamento']]

    # Renomear colunas para portugu√™s
    df_export = df_export.rename(columns={
        'talhao': 'Talh√£o',
        'area_ha': '√Årea (ha)',
        'metodo_calculo': 'M√©todo de C√°lculo',
        'data_processamento': 'Data Processamento'
    })

    return df_export.to_csv(index=False)


def criar_interface_areas_configuracao():
    '''
    Cria interface para configura√ß√£o de √°reas (para usar em ui/configuracoes.py)

    Returns:
        dict: Configura√ß√µes de √°rea selecionadas
    '''
    st.subheader("üìè Configura√ß√µes de √Årea")

    col1, col2, col3 = st.columns(3)

    with col1:
        metodo_area = st.selectbox(
            "üó∫Ô∏è M√©todo para √Årea dos Talh√µes",
            [
                "Simular automaticamente",
                "Valores informados manualmente",
                "Upload shapefile",
                "Coordenadas das parcelas"
            ],
            help="Como calcular as √°reas dos talh√µes"
        )

    with col2:
        area_parcela = st.number_input(
            "üìê √Årea da Parcela (m¬≤)",
            min_value=100,
            max_value=2000,
            value=400,
            step=100,
            help="√Årea padr√£o: 400m¬≤ (20x20m)"
        )

    with col3:
        if metodo_area == "Coordenadas das parcelas":
            raio_parcela = st.number_input(
                "üìê Raio da Parcela (m)",
                min_value=5.0,
                max_value=30.0,
                value=11.28,
                step=0.1,
                help="Raio para calcular √°rea circular"
            )
            area_calculada = np.pi * (raio_parcela ** 2)
            st.write(f"**√Årea**: {area_calculada:.0f} m¬≤")
        else:
            raio_parcela = 11.28  # Valor padr√£o

    # Configura√ß√µes espec√≠ficas por m√©todo
    config_especifica = {}

    if metodo_area == "Valores informados manualmente":
        st.write("**üìù Informe as √°reas por talh√£o:**")
        st.info("üí° As √°reas ser√£o coletadas na interface principal")
        config_especifica['tipo'] = 'manual'

    elif metodo_area == "Upload shapefile":
        st.success("üìÅ Shapefile ser√° processado automaticamente")
        config_especifica['tipo'] = 'shapefile'

    elif metodo_area == "Coordenadas das parcelas":
        st.success("üìç Coordenadas ser√£o processadas automaticamente")
        config_especifica['tipo'] = 'coordenadas'
        config_especifica['raio_parcela'] = raio_parcela

    else:
        st.info("üé≤ √Åreas ser√£o simuladas baseadas no n√∫mero de parcelas")
        config_especifica['tipo'] = 'simulacao'

    return {
        'metodo_area': metodo_area,
        'area_parcela': area_parcela,
        'raio_parcela': raio_parcela,
        'config_especifica': config_especifica
    }