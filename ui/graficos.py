# ui/graficos.py - VERS√ÉO CORRIGIDA
"""
Interface para gr√°ficos e visualiza√ß√µes - COM CORRE√á√ÉO DE MEM√ìRIA
"""

import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from utils.formatacao import formatar_brasileiro, classificar_qualidade_modelo
from config.config import CORES_MODELOS
import contextlib


@contextlib.contextmanager
def criar_figura(*args, **kwargs):
    """Context manager para criar e limpar figuras automaticamente"""
    fig, ax = plt.subplots(*args, **kwargs)
    try:
        yield fig, ax
    finally:
        plt.close(fig)  # CORRE√á√ÉO: Sempre fechar a figura


def criar_graficos_modelos(df_dados, resultados, predicoes, tipo_modelo):
    """
    Cria gr√°ficos detalhados para modelos hipsom√©tricos ou volum√©tricos

    Args:
        df_dados: DataFrame com dados originais
        resultados: Dict com resultados dos modelos
        predicoes: Dict com predi√ß√µes dos modelos
        tipo_modelo: 'hipsometrico' ou 'volumetrico'
    """
    if tipo_modelo == 'hipsometrico':
        criar_graficos_hipsometricos(df_dados, resultados, predicoes)
    elif tipo_modelo == 'volumetrico':
        criar_graficos_volumetricos(df_dados, resultados, predicoes)


def criar_graficos_hipsometricos(df_hip, resultados, predicoes):
    """
    Cria gr√°ficos espec√≠ficos para modelos hipsom√©tricos

    Args:
        df_hip: DataFrame com dados hipsom√©tricos
        resultados: Resultados dos modelos
        predicoes: Predi√ß√µes dos modelos
    """
    st.subheader("üìä Detalhamento dos Modelos Hipsom√©tricos")

    # Criar abas para cada modelo
    if len(predicoes) > 0:
        abas_hip = st.tabs([f"{modelo}" for modelo in predicoes.keys()])

        for i, (modelo, aba) in enumerate(zip(predicoes.keys(), abas_hip)):
            with aba:
                mostrar_detalhes_modelo_hipsometrico(
                    modelo, df_hip, resultados[modelo], predicoes[modelo], i
                )


def mostrar_detalhes_modelo_hipsometrico(modelo, df_hip, resultado, predicao, cor_idx):
    """
    Mostra detalhes completos de um modelo hipsom√©trico

    Args:
        modelo: Nome do modelo
        df_hip: DataFrame com dados
        resultado: Resultado do modelo
        predicao: Predi√ß√µes do modelo
        cor_idx: √çndice da cor
    """
    col1, col2 = st.columns([1, 1])

    with col1:
        # Informa√ß√µes do modelo
        mostrar_info_modelo_hipsometrico(modelo, resultado)

    with col2:
        # Gr√°fico principal do modelo
        criar_grafico_ajuste_hipsometrico(modelo, df_hip, predicao, cor_idx)

    # Gr√°ficos de res√≠duos - com prote√ß√£o extra
    try:
        criar_graficos_residuos_hipsometricos(modelo, df_hip['H_m'], predicao, cor_idx)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Gr√°ficos de res√≠duos indispon√≠veis para {modelo}")
        st.info("üí° Continuando com outros modelos...")


def mostrar_info_modelo_hipsometrico(modelo, resultado):
    """
    Mostra informa√ß√µes de um modelo hipsom√©trico

    Args:
        modelo: Nome do modelo
        resultado: Resultado do modelo
    """
    r2g = resultado['r2g']
    rmse = resultado['rmse']

    # Classifica√ß√£o da qualidade
    qualidade = classificar_qualidade_modelo(r2g)

    st.write(f"**Qualidade:** {qualidade}")
    st.write(f"**R¬≤ Generalizado:** {r2g:.4f}")
    st.write(f"**RMSE:** {rmse:.4f}")

    # Equa√ß√£o espec√≠fica do modelo
    mostrar_equacao_modelo_hipsometrico(modelo)


def mostrar_equacao_modelo_hipsometrico(modelo):
    """
    Mostra a equa√ß√£o espec√≠fica do modelo hipsom√©trico

    Args:
        modelo: Nome do modelo
    """
    equacoes = {
        "Curtis": r"ln(H) = \beta_0 + \beta_1 \cdot \frac{1}{D}",
        "Campos": r"ln(H) = \beta_0 + \beta_1 \cdot \frac{1}{D} + \beta_2 \cdot ln(H_{dom})",
        "Henri": r"H = \beta_0 + \beta_1 \cdot ln(D)",
        "Prodan": r"\frac{D^2}{H-1.3} = \beta_0 + \beta_1 \cdot D + \beta_2 \cdot D^2",
        "Chapman": r"H = b_0 \cdot (1 - e^{-b_1 \cdot D})^{b_2}",
        "Weibull": r"H = a \cdot (1 - e^{-b \cdot D^c})",
        "Mononuclear": r"H = a \cdot (1 - b \cdot e^{-c \cdot D})"
    }

    if modelo in equacoes:
        st.latex(equacoes[modelo])


def criar_grafico_ajuste_hipsometrico(modelo, df_hip, predicao, cor_idx):
    """
    Cria gr√°fico de ajuste para modelo hipsom√©trico - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        modelo: Nome do modelo
        df_hip: DataFrame com dados
        predicao: Predi√ß√µes do modelo
        cor_idx: √çndice da cor
    """
    # CORRE√á√ÉO: Usar context manager para gerenciar mem√≥ria
    with criar_figura(figsize=(8, 6)) as (fig, ax):
        # Dados observados
        ax.scatter(df_hip['D_cm'], df_hip['H_m'], alpha=0.4, color='gray', s=15, label='Observado')

        # Modelo espec√≠fico
        cor = CORES_MODELOS[cor_idx % len(CORES_MODELOS)]
        ax.scatter(df_hip['D_cm'], predicao, alpha=0.7, color=cor, s=15, label=f'{modelo}')

        # Configura√ß√µes do gr√°fico
        r2_modelo = 1 - np.sum((df_hip['H_m'] - predicao) ** 2) / np.sum((df_hip['H_m'] - np.mean(df_hip['H_m'])) ** 2)
        ax.set_title(f'{modelo} (R¬≤ = {r2_modelo:.3f})')
        ax.set_xlabel('Di√¢metro (cm)')
        ax.set_ylabel('Altura (m)')
        ax.legend()
        ax.grid(True, alpha=0.3)

        st.pyplot(fig)
        # Figure ser√° fechada automaticamente pelo context manager


def criar_graficos_residuos_hipsometricos(modelo, y_obs, y_pred, cor_idx):
    """
    Cria gr√°ficos de res√≠duos para modelo hipsom√©trico - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        modelo: Nome do modelo
        y_obs: Valores observados
        y_pred: Valores preditos
        cor_idx: √çndice da cor
    """
    st.subheader(f"üìà An√°lise de Res√≠duos - {modelo}")

    try:
        # Converter tudo para numpy arrays primeiro
        y_obs_array = np.array(y_obs)
        y_pred_array = np.array(y_pred)

        # Garantir que ambos tenham o mesmo tamanho
        min_len = min(len(y_obs_array), len(y_pred_array))

        if min_len == 0:
            st.warning(f"‚ö†Ô∏è Sem dados v√°lidos para res√≠duos do modelo {modelo}")
            return

        # Truncar para o mesmo tamanho
        y_obs_aligned = y_obs_array[:min_len]
        y_pred_aligned = y_pred_array[:min_len]

        # Verificar se ainda h√° incompatibilidade
        if len(y_obs_aligned) != len(y_pred_aligned):
            st.error(f"‚ùå Ainda h√° incompatibilidade de tamanhos: {len(y_obs_aligned)} vs {len(y_pred_aligned)}")
            return

        # Calcular res√≠duos
        residuos = y_obs_aligned - y_pred_aligned
        cor = CORES_MODELOS[cor_idx % len(CORES_MODELOS)]

        # Verificar se h√° dados NaN
        mask_validos = ~(np.isnan(y_pred_aligned) | np.isnan(residuos))
        y_pred_plot = y_pred_aligned[mask_validos]
        residuos_plot = residuos[mask_validos]

        if len(y_pred_plot) == 0:
            st.warning(f"‚ö†Ô∏è Sem dados v√°lidos ap√≥s remover NaN para {modelo}")
            return

        col1_res, col2_res = st.columns(2)

        with col1_res:
            # CORRE√á√ÉO: Res√≠duos vs Preditos com context manager
            with criar_figura(figsize=(6, 5)) as (fig_res1, ax_res1):
                ax_res1.scatter(y_pred_plot, residuos_plot, alpha=0.6, color=cor)
                ax_res1.axhline(y=0, color='red', linestyle='--')
                ax_res1.set_xlabel('Valores Preditos (m)')
                ax_res1.set_ylabel('Res√≠duos (m)')
                ax_res1.set_title(f'Res√≠duos vs Preditos - {modelo}')
                ax_res1.grid(True, alpha=0.3)
                st.pyplot(fig_res1)
                # Figure ser√° fechada automaticamente

        with col2_res:
            # CORRE√á√ÉO: Histograma dos res√≠duos com context manager
            with criar_figura(figsize=(6, 5)) as (fig_res2, ax_res2):
                ax_res2.hist(residuos_plot, bins=min(15, len(residuos_plot) // 2), alpha=0.7, color=cor, edgecolor='black')
                ax_res2.axvline(x=0, color='red', linestyle='--')
                ax_res2.set_xlabel('Res√≠duos (m)')
                ax_res2.set_ylabel('Frequ√™ncia')
                ax_res2.set_title(f'Distribui√ß√£o dos Res√≠duos - {modelo}')
                ax_res2.grid(True, alpha=0.3)
                st.pyplot(fig_res2)
                # Figure ser√° fechada automaticamente

    except Exception as e:
        # Criar gr√°fico b√°sico sem res√≠duos como fallback
        st.info(f"üí° Criando gr√°fico simplificado para {modelo}")
        try:
            with criar_figura(figsize=(6, 4)) as (fig_simple, ax_simple):
                ax_simple.text(0.5, 0.5, f'Erro nos res√≠duos\ndo modelo {modelo}',
                               ha='center', va='center', transform=ax_simple.transAxes)
                ax_simple.set_title(f'Erro - {modelo}')
                st.pyplot(fig_simple)
                # Figure ser√° fechada automaticamente
        except:
            pass


def criar_graficos_volumetricos(df_vol, resultados, predicoes):
    """
    Cria gr√°ficos espec√≠ficos para modelos volum√©tricos

    Args:
        df_vol: DataFrame com dados volum√©tricos
        resultados: Resultados dos modelos
        predicoes: Predi√ß√µes dos modelos
    """
    st.subheader("üìä Detalhamento dos Modelos Volum√©tricos")

    # Criar abas para cada modelo volum√©trico
    abas_vol = st.tabs([f"{modelo}" for modelo in resultados.keys()])

    for i, (modelo, aba) in enumerate(zip(resultados.keys(), abas_vol)):
        with aba:
            mostrar_detalhes_modelo_volumetrico(
                modelo, df_vol, resultados[modelo], predicoes[modelo], i
            )


def mostrar_detalhes_modelo_volumetrico(modelo, df_vol, resultado, predicao, cor_idx):
    """
    Mostra detalhes completos de um modelo volum√©trico

    Args:
        modelo: Nome do modelo
        df_vol: DataFrame com dados
        resultado: Resultado do modelo
        predicao: Predi√ß√µes do modelo
        cor_idx: √çndice da cor
    """
    col1, col2 = st.columns([1, 1])

    with col1:
        # Informa√ß√µes do modelo
        mostrar_info_modelo_volumetrico(modelo, resultado)

    with col2:
        # Gr√°fico observado vs predito
        criar_grafico_obs_vs_pred_volumetrico(modelo, df_vol['V'], predicao, cor_idx)

    # Gr√°ficos de res√≠duos volum√©tricos
    criar_graficos_residuos_volumetricos(modelo, df_vol['V'], predicao, cor_idx)


def mostrar_info_modelo_volumetrico(modelo, resultado):
    """
    Mostra informa√ß√µes de um modelo volum√©trico

    Args:
        modelo: Nome do modelo
        resultado: Resultado do modelo
    """
    r2 = resultado['r2']
    rmse = resultado['rmse']

    # Classifica√ß√£o da qualidade
    qualidade = classificar_qualidade_modelo(r2)

    st.write(f"**Qualidade:** {qualidade}")
    st.write(f"**R¬≤:** {r2:.4f}")
    st.write(f"**RMSE:** {rmse:.4f}")

    # Equa√ß√£o espec√≠fica do modelo
    mostrar_equacao_modelo_volumetrico(modelo)


def mostrar_equacao_modelo_volumetrico(modelo):
    """
    Mostra a equa√ß√£o espec√≠fica do modelo volum√©trico

    Args:
        modelo: Nome do modelo
    """
    equacoes = {
        "Schumacher": r"ln(V) = \beta_0 + \beta_1 \cdot ln(D) + \beta_2 \cdot ln(H)",
        "G1": r"ln(V) = \beta_0 + \beta_1 \cdot ln(D) + \beta_2 \cdot \frac{1}{D}",
        "G2": r"V = \beta_0 + \beta_1 \cdot D^2 + \beta_2 \cdot D^2H + \beta_3 \cdot H",
        "G3": r"ln(V) = \beta_0 + \beta_1 \cdot ln(D^2H)"
    }

    if modelo in equacoes:
        st.latex(equacoes[modelo])


def criar_grafico_obs_vs_pred_volumetrico(modelo, y_obs, y_pred, cor_idx):
    """
    Cria gr√°fico observado vs predito para modelo volum√©trico - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        modelo: Nome do modelo
        y_obs: Valores observados
        y_pred: Valores preditos
        cor_idx: √çndice da cor
    """
    # CORRE√á√ÉO: Usar context manager
    with criar_figura(figsize=(8, 6)) as (fig, ax):
        # Scatter plot
        cor = CORES_MODELOS[cor_idx % len(CORES_MODELOS)]
        ax.scatter(y_obs, y_pred, alpha=0.6, color=cor)

        # Linha 1:1
        min_val = min(y_obs.min(), y_pred.min())
        max_val = max(y_obs.max(), y_pred.max())
        ax.plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2, label='1:1')

        # Configura√ß√µes
        r2 = 1 - np.sum((y_obs - y_pred) ** 2) / np.sum((y_obs - np.mean(y_obs)) ** 2)
        ax.set_title(f'{modelo} (R¬≤ = {r2:.3f})')
        ax.set_xlabel('Volume Observado (m¬≥)')
        ax.set_ylabel('Volume Predito (m¬≥)')
        ax.legend()
        ax.grid(True, alpha=0.3)

        st.pyplot(fig)
        # Figure ser√° fechada automaticamente


def criar_graficos_residuos_volumetricos(modelo, y_obs, y_pred, cor_idx):
    """
    Cria gr√°ficos de res√≠duos para modelo volum√©trico - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        modelo: Nome do modelo
        y_obs: Valores observados
        y_pred: Valores preditos
        cor_idx: √çndice da cor
    """
    st.subheader(f"üìà An√°lise de Res√≠duos - {modelo}")

    try:
        # Garantir que y_obs e y_pred tenham o mesmo tamanho
        if len(y_obs) != len(y_pred):
            # Alinhar os tamanhos (pegar o m√≠nimo)
            min_len = min(len(y_obs), len(y_pred))
            y_obs_aligned = y_obs.iloc[:min_len] if hasattr(y_obs, 'iloc') else y_obs[:min_len]
            y_pred_aligned = y_pred[:min_len] if hasattr(y_pred, '__getitem__') else y_pred[:min_len]
        else:
            y_obs_aligned = y_obs
            y_pred_aligned = y_pred

        # Calcular res√≠duos com dados alinhados
        residuos = y_obs_aligned - y_pred_aligned
        cor = CORES_MODELOS[cor_idx % len(CORES_MODELOS)]

        # Converter para numpy arrays se necess√°rio
        if hasattr(y_pred_aligned, 'values'):
            y_pred_plot = y_pred_aligned.values
        else:
            y_pred_plot = np.array(y_pred_aligned)

        if hasattr(residuos, 'values'):
            residuos_plot = residuos.values
        else:
            residuos_plot = np.array(residuos)

        col1_res, col2_res = st.columns(2)

        with col1_res:
            # CORRE√á√ÉO: Res√≠duos vs Preditos com context manager
            with criar_figura(figsize=(6, 5)) as (fig_res1, ax_res1):
                ax_res1.scatter(y_pred_plot, residuos_plot, alpha=0.6, color=cor)
                ax_res1.axhline(y=0, color='red', linestyle='--')
                ax_res1.set_xlabel('Volumes Preditos (m¬≥)')
                ax_res1.set_ylabel('Res√≠duos (m¬≥)')
                ax_res1.set_title('Res√≠duos vs Preditos')
                ax_res1.grid(True, alpha=0.3)
                st.pyplot(fig_res1)
                # Figure ser√° fechada automaticamente

        with col2_res:
            # CORRE√á√ÉO: Histograma dos res√≠duos com context manager
            with criar_figura(figsize=(6, 5)) as (fig_res2, ax_res2):
                ax_res2.hist(residuos_plot, bins=15, alpha=0.7, color=cor, edgecolor='black')
                ax_res2.axvline(x=0, color='red', linestyle='--')
                ax_res2.set_xlabel('Res√≠duos (m¬≥)')
                ax_res2.set_ylabel('Frequ√™ncia')
                ax_res2.set_title('Distribui√ß√£o dos Res√≠duos')
                ax_res2.grid(True, alpha=0.3)
                st.pyplot(fig_res2)
                # Figure ser√° fechada automaticamente

    except Exception as e:
        st.error(f"‚ùå Erro ao criar gr√°ficos de res√≠duos para {modelo}: {e}")
        st.info("üí° Poss√≠vel incompatibilidade entre tamanhos dos dados observados e preditos")


def criar_graficos_inventario(resultados):
    """
    Cria gr√°ficos espec√≠ficos para o invent√°rio final - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        resultados: Resultados completos do invent√°rio
    """
    resumo_parcelas = resultados.get('resumo_parcelas')
    resumo_talhoes = resultados.get('resumo_talhoes')

    if resumo_parcelas is None or len(resumo_parcelas) == 0:
        st.warning("‚ö†Ô∏è Dados insuficientes para gr√°ficos")
        return

    # Verificar colunas dispon√≠veis
    colunas_disponiveis = resumo_parcelas.columns.tolist()

    # Gr√°fico 1: Distribui√ß√£o de produtividade (se vol_ha dispon√≠vel)
    if 'vol_ha' in colunas_disponiveis:
        criar_grafico_distribuicao_produtividade(resumo_parcelas)
    else:
        st.info("‚ÑπÔ∏è Gr√°fico de produtividade n√£o dispon√≠vel (coluna vol_ha ausente)")

    # Gr√°fico 2: Produtividade por talh√£o (se dados de talh√£o dispon√≠veis)
    if resumo_talhoes is not None and len(resumo_talhoes) > 0:
        criar_grafico_produtividade_talhao(resumo_talhoes)
    else:
        st.info("‚ÑπÔ∏è Gr√°fico por talh√£o n√£o dispon√≠vel")

    # Gr√°fico 3: Correla√ß√µes (se colunas suficientes dispon√≠veis)
    colunas_correlacao = ['vol_ha', 'dap_medio', 'altura_media', 'idade_anos']
    colunas_correlacao_disponiveis = [col for col in colunas_correlacao if col in colunas_disponiveis]

    if len(colunas_correlacao_disponiveis) >= 2:
        criar_graficos_correlacoes(resumo_parcelas)
    else:
        st.info("‚ÑπÔ∏è Gr√°ficos de correla√ß√£o n√£o dispon√≠veis (colunas insuficientes)")


def criar_grafico_distribuicao_produtividade(resumo_parcelas):
    """
    Cria gr√°fico de distribui√ß√£o da produtividade - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        resumo_parcelas: DataFrame com resumo por parcela
    """
    # Verificar se coluna vol_ha existe
    if 'vol_ha' not in resumo_parcelas.columns:
        st.warning("‚ö†Ô∏è Coluna 'vol_ha' n√£o encontrada para gr√°fico de produtividade")
        return

    st.subheader("üìä Distribui√ß√£o de Produtividade")

    col1, col2 = st.columns(2)

    with col1:
        try:
            # CORRE√á√ÉO: Histograma com context manager
            with criar_figura(figsize=(8, 6)) as (fig, ax):
                vol_medio = resumo_parcelas['vol_ha'].mean()

                ax.hist(resumo_parcelas['vol_ha'], bins=15, alpha=0.7, color='forestgreen', edgecolor='black')
                ax.axvline(vol_medio, color='red', linestyle='--', linewidth=2,
                           label=f'M√©dia: {vol_medio:.1f} m¬≥/ha')
                ax.set_xlabel('Produtividade (m¬≥/ha)')
                ax.set_ylabel('Frequ√™ncia')
                ax.set_title('Distribui√ß√£o de Produtividade')
                ax.legend()
                ax.grid(True, alpha=0.3)
                st.pyplot(fig)
                # Figure ser√° fechada automaticamente
        except Exception as e:
            st.error(f"Erro no histograma: {e}")

    with col2:
        try:
            # CORRE√á√ÉO: Box plot com context manager
            with criar_figura(figsize=(8, 6)) as (fig, ax):
                ax.boxplot(resumo_parcelas['vol_ha'], vert=True)
                ax.set_ylabel('Produtividade (m¬≥/ha)')
                ax.set_title('Box Plot - Produtividade')
                ax.grid(True, alpha=0.3)
                st.pyplot(fig)
                # Figure ser√° fechada automaticamente
        except Exception as e:
            st.error(f"Erro no box plot: {e}")


def criar_grafico_produtividade_talhao(resumo_talhoes):
    """
    Cria gr√°fico de produtividade por talh√£o - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        resumo_talhoes: DataFrame com resumo por talh√£o
    """
    # Verificar se coluna de volume existe
    col_volume = None
    for col_name in ['vol_medio_ha', 'vol_ha', 'volume_medio']:
        if col_name in resumo_talhoes.columns:
            col_volume = col_name
            break

    if col_volume is None:
        st.warning("‚ö†Ô∏è Dados de volume por talh√£o n√£o dispon√≠veis")
        return

    st.subheader("üå≥ Produtividade por Talh√£o")

    try:
        # CORRE√á√ÉO: Gr√°fico de barras com context manager
        with criar_figura(figsize=(12, 6)) as (fig, ax):
            # Ordenar por produtividade
            talhao_ordenado = resumo_talhoes.sort_values(col_volume, ascending=False)

            bars = ax.bar(range(len(talhao_ordenado)),
                          talhao_ordenado[col_volume],
                          color='steelblue', alpha=0.7)

            ax.set_xlabel('Talh√£o')
            ax.set_ylabel('Produtividade (m¬≥/ha)')
            ax.set_title('Produtividade por Talh√£o')
            ax.set_xticks(range(len(talhao_ordenado)))
            ax.set_xticklabels([f'T{t}' for t in talhao_ordenado['talhao']])
            ax.grid(True, alpha=0.3)

            # Adicionar valores nas barras
            for bar, val in zip(bars, talhao_ordenado[col_volume]):
                ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1,
                        f'{val:.0f}', ha='center', va='bottom')

            st.pyplot(fig)
            # Figure ser√° fechada automaticamente

    except Exception as e:
        st.error(f"Erro no gr√°fico por talh√£o: {e}")


def criar_graficos_correlacoes(resumo_parcelas):
    """
    Cria gr√°ficos de correla√ß√µes entre vari√°veis - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        resumo_parcelas: DataFrame com resumo por parcela
    """
    st.subheader("üîó Correla√ß√µes entre Vari√°veis")

    # Verificar quais colunas est√£o dispon√≠veis
    colunas_interesse = {
        'vol_ha': 'Produtividade (m¬≥/ha)',
        'dap_medio': 'DAP M√©dio (cm)',
        'altura_media': 'Altura M√©dia (m)',
        'idade_anos': 'Idade (anos)'
    }

    colunas_disponiveis = {k: v for k, v in colunas_interesse.items() if k in resumo_parcelas.columns}

    if len(colunas_disponiveis) < 2:
        st.warning("‚ö†Ô∏è Colunas insuficientes para correla√ß√µes")
        return

    try:
        # Determinar o layout baseado no n√∫mero de gr√°ficos poss√≠veis
        n_graficos = min(4, len(colunas_disponiveis) * (len(colunas_disponiveis) - 1) // 2)

        # CORRE√á√ÉO: Usar context manager para subplot
        if n_graficos >= 4:
            with criar_figura(figsize=(12, 10)) as (fig, axes):
                axes = axes.flatten() if hasattr(axes, 'flatten') else [axes]
                criar_subplots_correlacao(resumo_parcelas, colunas_disponiveis, axes)
                plt.tight_layout()
                st.pyplot(fig)
        elif n_graficos >= 2:
            with criar_figura(figsize=(12, 5)) as (fig, axes):
                if n_graficos == 2:
                    axes = [axes[0], axes[1]] if hasattr(axes, '__len__') else [axes]
                else:
                    axes = axes.flatten() if hasattr(axes, 'flatten') else [axes]
                criar_subplots_correlacao(resumo_parcelas, colunas_disponiveis, axes)
                plt.tight_layout()
                st.pyplot(fig)
        else:
            with criar_figura(figsize=(6, 5)) as (fig, ax):
                axes = [ax]
                criar_subplots_correlacao(resumo_parcelas, colunas_disponiveis, axes)
                st.pyplot(fig)
        # Figure ser√° fechada automaticamente pelo context manager

    except Exception as e:
        st.error(f"Erro nos gr√°ficos de correla√ß√£o: {e}")
        st.info(f"Colunas dispon√≠veis: {list(colunas_disponiveis.keys())}")


def criar_subplots_correlacao(resumo_parcelas, colunas_disponiveis, axes):
    """
    Fun√ß√£o auxiliar para criar subplots de correla√ß√£o

    Args:
        resumo_parcelas: DataFrame com dados
        colunas_disponiveis: Dict com colunas dispon√≠veis
        axes: Lista de axes do matplotlib
    """
    idx = 0
    cores = ['forestgreen', 'steelblue', 'orange', 'purple']

    # Gr√°fico 1: Produtividade vs DAP (se ambos dispon√≠veis)
    if 'vol_ha' in colunas_disponiveis and 'dap_medio' in colunas_disponiveis and idx < len(axes):
        axes[idx].scatter(resumo_parcelas['dap_medio'], resumo_parcelas['vol_ha'],
                          alpha=0.6, color=cores[idx % len(cores)])
        axes[idx].set_xlabel(colunas_disponiveis['dap_medio'])
        axes[idx].set_ylabel(colunas_disponiveis['vol_ha'])
        axes[idx].set_title('Produtividade vs DAP')
        axes[idx].grid(True, alpha=0.3)
        idx += 1

    # Gr√°fico 2: Produtividade vs Altura (se ambos dispon√≠veis)
    if 'vol_ha' in colunas_disponiveis and 'altura_media' in colunas_disponiveis and idx < len(axes):
        axes[idx].scatter(resumo_parcelas['altura_media'], resumo_parcelas['vol_ha'],
                          alpha=0.6, color=cores[idx % len(cores)])
        axes[idx].set_xlabel(colunas_disponiveis['altura_media'])
        axes[idx].set_ylabel(colunas_disponiveis['vol_ha'])
        axes[idx].set_title('Produtividade vs Altura')
        axes[idx].grid(True, alpha=0.3)
        idx += 1

    # Gr√°fico 3: Produtividade vs Idade (se ambos dispon√≠veis)
    if 'vol_ha' in colunas_disponiveis and 'idade_anos' in colunas_disponiveis and idx < len(axes):
        axes[idx].scatter(resumo_parcelas['idade_anos'], resumo_parcelas['vol_ha'],
                          alpha=0.6, color=cores[idx % len(cores)])
        axes[idx].set_xlabel(colunas_disponiveis['idade_anos'])
        axes[idx].set_ylabel(colunas_disponiveis['vol_ha'])
        axes[idx].set_title('Produtividade vs Idade')
        axes[idx].grid(True, alpha=0.3)
        idx += 1

    # Gr√°fico 4: DAP vs Altura (se ambos dispon√≠veis)
    if 'dap_medio' in colunas_disponiveis and 'altura_media' in colunas_disponiveis and idx < len(axes):
        axes[idx].scatter(resumo_parcelas['dap_medio'], resumo_parcelas['altura_media'],
                          alpha=0.6, color=cores[idx % len(cores)])
        axes[idx].set_xlabel(colunas_disponiveis['dap_medio'])
        axes[idx].set_ylabel(colunas_disponiveis['altura_media'])
        axes[idx].set_title('DAP vs Altura')
        axes[idx].grid(True, alpha=0.3)
        idx += 1

    # Esconder eixos n√£o utilizados
    for i in range(idx, len(axes)):
        axes[i].set_visible(False)


def criar_grafico_classificacao_produtividade(stats):
    """
    Cria gr√°fico pizza da classifica√ß√£o de produtividade - COM CORRE√á√ÉO DE MEM√ìRIA

    Args:
        stats: Estat√≠sticas gerais do invent√°rio
    """
    # Verificar se dados est√£o dispon√≠veis
    if not all(key in stats for key in ['classe_alta', 'classe_media', 'classe_baixa']):
        st.warning("‚ö†Ô∏è Dados de classifica√ß√£o n√£o dispon√≠veis")
        return

    st.subheader("ü•ß Classifica√ß√£o de Produtividade")

    try:
        # Dados para o gr√°fico pizza
        labels = ['Classe Alta', 'Classe M√©dia', 'Classe Baixa']
        sizes = [stats['classe_alta'], stats['classe_media'], stats['classe_baixa']]
        colors = ['#2e8b57', '#ffa500', '#dc143c']  # Verde, laranja, vermelho

        # CORRE√á√ÉO: Usar context manager para gr√°fico pizza
        with criar_figura(figsize=(8, 8)) as (fig, ax):
            wedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',
                                              startangle=90, textprops={'fontsize': 12})

            ax.set_title('Distribui√ß√£o das Classes de Produtividade', fontsize=14, fontweight='bold')

            # Adicionar legenda com detalhes
            q25 = stats.get('q25_volume', 80.0)
            q75 = stats.get('q75_volume', 120.0)

            legend_labels = [
                f'Alta (‚â•{q75:.1f} m¬≥/ha): {stats["classe_alta"]} parcelas',
                f'M√©dia ({q25:.1f}-{q75:.1f} m¬≥/ha): {stats["classe_media"]} parcelas',
                f'Baixa (<{q25:.1f} m¬≥/ha): {stats["classe_baixa"]} parcelas'
            ]

            ax.legend(wedges, legend_labels, title="Classes", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
            st.pyplot(fig)
            # Figure ser√° fechada automaticamente

    except Exception as e:
        st.error(f"Erro no gr√°fico de classifica√ß√£o: {e}")


def configurar_estilo_matplotlib():
    """
    Configura estilo padr√£o para gr√°ficos matplotlib
    """
    plt.style.use('default')
    plt.rcParams.update({
        'font.size': 10,
        'axes.titlesize': 12,
        'axes.labelsize': 10,
        'xtick.labelsize': 9,
        'ytick.labelsize': 9,
        'legend.fontsize': 9,
        'figure.titlesize': 14,
        'axes.grid': True,
        'grid.alpha': 0.3,
        'figure.max_open_warning': 5  # CORRE√á√ÉO: Reduzir limite de figuras abertas
    })


def limpar_cache_matplotlib():
    """
    NOVA FUN√á√ÉO: Limpa cache de matplotlib para liberar mem√≥ria
    """
    try:
        plt.close('all')  # Fecha todas as figuras abertas
        plt.clf()         # Limpa figura atual
        plt.cla()         # Limpa axes atual
    except:
        pass


# CORRE√á√ÉO: Configurar estilo ao importar o m√≥dulo
configurar_estilo_matplotlib()

# CORRE√á√ÉO: Adicionar hook para limpeza autom√°tica
import atexit
atexit.register(limpar_cache_matplotlib)