# ui/configuracoes.py
'''
Interface para configura√ß√µes do sistema
'''

import streamlit as st
import numpy as np
from config.config import DEFAULTS


def criar_configuracoes(df_inventario):
    '''
    Cria interface de configura√ß√µes do sistema

    Args:
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Configura√ß√µes selecionadas pelo usu√°rio
    '''
    st.header("‚öôÔ∏è Configura√ß√µes")

    # Configura√ß√µes principais
    config_principais = criar_configuracoes_principais(df_inventario)

    # Configura√ß√µes de √°rea
    config_areas = criar_configuracoes_areas(df_inventario)

    # Combinar todas as configura√ß√µes
    config_completa = {**config_principais, **config_areas}

    # Mostrar resumo das configura√ß√µes
    mostrar_resumo_configuracoes(config_completa, df_inventario)

    return config_completa


def criar_configuracoes_principais(df_inventario):
    '''
    Cria configura√ß√µes principais de filtros

    Args:
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Configura√ß√µes principais
    '''
    col1, col2, col3 = st.columns(3)

    with col1:
        talhoes_excluir = st.multiselect(
            "üö´ Talh√µes a excluir",
            options=sorted(df_inventario['talhao'].unique()),
            help="Ex: Pinus, √°reas experimentais"
        )

    with col2:
        diametro_min = st.number_input(
            "üìè Di√¢metro m√≠nimo (cm)",
            min_value=0.0,
            max_value=20.0,
            value=DEFAULTS['diametro_min'],
            step=0.5,
            help="Di√¢metro m√≠nimo para inclus√£o na an√°lise"
        )

    with col3:
        codigos_disponiveis = sorted(df_inventario['cod'].unique()) if 'cod' in df_inventario.columns else []
        codigos_excluir = st.multiselect(
            "üè∑Ô∏è C√≥digos a excluir",
            options=codigos_disponiveis,
            default=[c for c in DEFAULTS['codigos_excluir'] if c in codigos_disponiveis],
            help="C√≥digos de √°rvores a excluir (C=Cortada, I=Invasora)"
        )

    return {
        'talhoes_excluir': talhoes_excluir,
        'diametro_min': diametro_min,
        'codigos_excluir': codigos_excluir
    }


def criar_configuracoes_areas(df_inventario):
    '''
    Cria configura√ß√µes espec√≠ficas para √°reas

    Args:
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Configura√ß√µes de √°rea
    '''
    st.subheader("üìè Configura√ß√µes de √Årea")

    col1, col2, col3 = st.columns(3)

    with col1:
        # Determinar m√©todos dispon√≠veis
        metodos_disponiveis = ["Simular automaticamente", "Valores informados manualmente"]

        # Verificar se existem arquivos opcionais carregados
        if 'arquivo_shapefile' in st.session_state and st.session_state.arquivo_shapefile is not None:
            metodos_disponiveis.append("Upload shapefile")

        if 'arquivo_coordenadas' in st.session_state and st.session_state.arquivo_coordenadas is not None:
            metodos_disponiveis.append("Coordenadas das parcelas")

        metodo_area = st.selectbox(
            "üó∫Ô∏è M√©todo para √Årea dos Talh√µes",
            options=metodos_disponiveis,
            help="Como calcular as √°reas dos talh√µes"
        )

    with col2:
        area_parcela = st.number_input(
            "üìê √Årea da Parcela (m¬≤)",
            min_value=100,
            max_value=2000,
            value=DEFAULTS['area_parcela'],
            step=100,
            help="√Årea padr√£o: 400m¬≤ (20x20m) ou 1000m¬≤ (c√≠rculo r=17.84m)"
        )

    with col3:
        if metodo_area == "Coordenadas das parcelas":
            raio_parcela = st.number_input(
                "üìê Raio da Parcela (m)",
                min_value=5.0,
                max_value=30.0,
                value=DEFAULTS['raio_parcela'],
                step=0.1,
                help="Raio para calcular √°rea circular (11.28m = 400m¬≤)"
            )
            area_calculada = np.pi * (raio_parcela ** 2)
            st.write(f"**√Årea calculada**: {area_calculada:.0f} m¬≤")
        else:
            raio_parcela = DEFAULTS['raio_parcela']

    # Configura√ß√µes espec√≠ficas por m√©todo
    config_areas_especifica = processar_configuracao_area_especifica(metodo_area, df_inventario)

    return {
        'metodo_area': metodo_area,
        'area_parcela': area_parcela,
        'raio_parcela': raio_parcela,
        **config_areas_especifica
    }


def processar_configuracao_area_especifica(metodo_area, df_inventario):
    '''
    Processa configura√ß√µes espec√≠ficas para cada m√©todo de √°rea

    Args:
        metodo_area: M√©todo selecionado
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Configura√ß√µes espec√≠ficas
    '''
    config = {}

    if metodo_area == "Valores informados manualmente":
        config.update(criar_interface_areas_manuais(df_inventario))

    elif metodo_area == "Upload shapefile":
        st.success("üìÅ Shapefile carregado!")
        st.write("‚úÖ √Åreas ser√£o extra√≠das automaticamente")
        config['usar_shapefile'] = True

    elif metodo_area == "Coordenadas das parcelas":
        st.success("üìç Coordenadas carregadas!")
        st.write("‚úÖ √Åreas ser√£o calculadas automaticamente")
        config['usar_coordenadas'] = True

    else:  # Simular automaticamente
        config.update(criar_interface_simulacao_areas())

    return config


def criar_interface_areas_manuais(df_inventario):
    '''
    Cria interface para entrada manual de √°reas

    Args:
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: √Åreas manuais configuradas
    '''
    st.write("**üìù √Åreas por Talh√£o (hectares):**")

    talhoes_disponiveis = sorted(df_inventario['talhao'].unique())
    areas_manuais = {}

    # Criar interface em colunas para melhor organiza√ß√£o
    n_colunas = min(4, len(talhoes_disponiveis))
    colunas = st.columns(n_colunas)

    for i, talhao in enumerate(talhoes_disponiveis):
        col_idx = i % n_colunas
        with colunas[col_idx]:
            areas_manuais[talhao] = st.number_input(
                f"Talh√£o {talhao}",
                min_value=0.1,
                max_value=1000.0,
                value=25.0,
                step=0.1,
                key=f"area_manual_talhao_{talhao}"
            )

    # Mostrar resumo das √°reas manuais
    if areas_manuais:
        area_total = sum(areas_manuais.values())
        area_media = np.mean(list(areas_manuais.values()))

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total", f"{area_total:.1f} ha")
        with col2:
            st.metric("M√©dia", f"{area_media:.1f} ha")
        with col3:
            st.metric("Talh√µes", len(areas_manuais))

    return {'areas_manuais': areas_manuais}


def criar_interface_simulacao_areas():
    '''
    Cria interface para configura√ß√£o da simula√ß√£o de √°reas

    Returns:
        dict: Configura√ß√µes da simula√ß√£o
    '''
    st.info("üí° **Simula√ß√£o Autom√°tica de √Åreas**")

    col1, col2 = st.columns(2)

    with col1:
        st.write("**M√©todo de simula√ß√£o:**")
        st.write("- Baseado no n√∫mero de parcelas por talh√£o")
        st.write("- Cada parcela representa 2-5 hectares")
        st.write("- Varia√ß√£o aleat√≥ria real√≠stica aplicada")

    with col2:
        st.write("**Par√¢metros:**")

        fator_expansao_min = st.slider(
            "Fator m√≠nimo (ha/parcela)",
            min_value=1.0,
            max_value=10.0,
            value=2.5,
            step=0.5,
            help="√Årea m√≠nima representada por parcela"
        )

        fator_expansao_max = st.slider(
            "Fator m√°ximo (ha/parcela)",
            min_value=fator_expansao_min,
            max_value=15.0,
            value=4.0,
            step=0.5,
            help="√Årea m√°xima representada por parcela"
        )

        variacao_percentual = st.slider(
            "Varia√ß√£o aleat√≥ria (%)",
            min_value=0,
            max_value=50,
            value=20,
            step=5,
            help="Percentual de varia√ß√£o aleat√≥ria aplicada"
        )

    return {
        'simulacao_fator_min': fator_expansao_min,
        'simulacao_fator_max': fator_expansao_max,
        'simulacao_variacao': variacao_percentual / 100
    }


def mostrar_resumo_configuracoes(config, df_inventario):
    '''
    Mostra resumo das configura√ß√µes selecionadas

    Args:
        config: Configura√ß√µes completas
        df_inventario: DataFrame do invent√°rio
    '''
    st.subheader("üìã Resumo das Configura√ß√µes")

    # Estat√≠sticas dos dados originais
    total_registros = len(df_inventario)
    total_talhoes = df_inventario['talhao'].nunique()
    total_parcelas = df_inventario['parcela'].nunique() if 'parcela' in df_inventario.columns else 0

    # Calcular impacto dos filtros de forma segura
    try:
        dados_filtrados = aplicar_preview_filtros(df_inventario, config)
        if dados_filtrados is not None and len(dados_filtrados) > 0:
            registros_apos_filtro = len(dados_filtrados)
            talhoes_apos_filtro = dados_filtrados['talhao'].nunique()
            parcelas_apos_filtro = dados_filtrados['parcela'].nunique() if 'parcela' in dados_filtrados.columns else 0
        else:
            # Fallback se filtros resultarem em dataset vazio
            registros_apos_filtro = 0
            talhoes_apos_filtro = 0
            parcelas_apos_filtro = 0
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erro ao aplicar preview dos filtros: {e}")
        # Usar dados originais como fallback
        registros_apos_filtro = total_registros
        talhoes_apos_filtro = total_talhoes
        parcelas_apos_filtro = total_parcelas

    # Mostrar estat√≠sticas
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        delta_registros = registros_apos_filtro - total_registros
        st.metric(
            "Registros",
            f"{registros_apos_filtro:,}",
            delta=f"{delta_registros:+,}" if delta_registros != 0 else None,
            delta_color="normal"
        )

    with col2:
        delta_talhoes = talhoes_apos_filtro - total_talhoes
        st.metric(
            "Talh√µes",
            talhoes_apos_filtro,
            delta=f"{delta_talhoes:+}" if delta_talhoes != 0 else None,
            delta_color="normal"
        )

    with col3:
        if total_parcelas > 0:
            delta_parcelas = parcelas_apos_filtro - total_parcelas
            st.metric(
                "Parcelas",
                parcelas_apos_filtro,
                delta=f"{delta_parcelas:+}" if delta_parcelas != 0 else None,
                delta_color="normal"
            )
        else:
            st.metric("Parcelas", "N/A")

    with col4:
        if total_registros > 0:
            percentual_mantido = (registros_apos_filtro / total_registros) * 100
        else:
            percentual_mantido = 0
        st.metric("Dados Mantidos", f"{percentual_mantido:.1f}%")

    # Mostrar configura√ß√µes aplicadas
    with st.expander("üîß Detalhes das Configura√ß√µes"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**Filtros:**")
            st.write(f"- Di√¢metro m√≠nimo: {config.get('diametro_min', 'N/A')} cm")
            if config.get('talhoes_excluir'):
                st.write(f"- Talh√µes exclu√≠dos: {config['talhoes_excluir']}")
            if config.get('codigos_excluir'):
                st.write(f"- C√≥digos exclu√≠dos: {config['codigos_excluir']}")

        with col2:
            st.write("**√Åreas:**")
            st.write(f"- M√©todo: {config.get('metodo_area', 'N/A')}")
            st.write(f"- √Årea da parcela: {config.get('area_parcela', 'N/A')} m¬≤")
            if config.get('metodo_area') == "Coordenadas das parcelas":
                st.write(f"- Raio da parcela: {config.get('raio_parcela', 'N/A')} m")


def aplicar_preview_filtros(df_inventario, config):
    '''
    Aplica filtros para preview sem modificar dados originais

    Args:
        df_inventario: DataFrame original
        config: Configura√ß√µes

    Returns:
        DataFrame filtrado para preview
    '''
    try:
        df_preview = df_inventario.copy()

        # Aplicar filtros b√°sicos de forma segura
        if config.get('talhoes_excluir'):
            df_preview = df_preview[~df_preview['talhao'].isin(config['talhoes_excluir'])]

        diametro_min = config.get('diametro_min', 0)
        if 'D_cm' in df_preview.columns:
            df_preview = df_preview[df_preview['D_cm'] >= diametro_min]

        if config.get('codigos_excluir') and 'cod' in df_preview.columns:
            df_preview = df_preview[~df_preview['cod'].isin(config['codigos_excluir'])]

        # Remover dados inv√°lidos de forma segura
        if 'D_cm' in df_preview.columns:
            df_preview = df_preview[
                (df_preview['D_cm'].notna()) &
                (df_preview['D_cm'] > 0)
                ]

        return df_preview

    except Exception as e:
        st.warning(f"Erro ao aplicar filtros: {e}")
        # Retornar DataFrame original em caso de erro
        return df_inventario


def validar_configuracoes(config, df_inventario):
    '''
    Valida as configura√ß√µes antes de executar an√°lise

    Args:
        config: Configura√ß√µes selecionadas
        df_inventario: DataFrame do invent√°rio

    Returns:
        dict: Resultado da valida√ß√£o
    '''
    validacao = {
        'valido': True,
        'alertas': [],
        'erros': []
    }

    # Verificar se dados suficientes ap√≥s filtros
    dados_filtrados = aplicar_preview_filtros(df_inventario, config)

    if len(dados_filtrados) < 20:
        validacao['erros'].append("Poucos dados ap√≥s aplicar filtros (m√≠nimo: 20 registros)")
        validacao['valido'] = False

    if dados_filtrados['talhao'].nunique() < 2:
        validacao['alertas'].append("Apenas um talh√£o ap√≥s filtros - considere revisar exclus√µes")

    # Verificar di√¢metro m√≠nimo
    if config['diametro_min'] > 15:
        validacao['alertas'].append("Di√¢metro m√≠nimo muito alto - pode excluir muitos dados")

    # Verificar configura√ß√µes de √°rea
    if config['metodo_area'] == "Valores informados manualmente":
        areas_manuais = config.get('areas_manuais', {})
        if not areas_manuais:
            validacao['erros'].append("Nenhuma √°rea manual foi informada")
            validacao['valido'] = False
        else:
            # Verificar √°reas muito pequenas ou grandes
            areas_pequenas = [t for t, a in areas_manuais.items() if a < 1]
            areas_grandes = [t for t, a in areas_manuais.items() if a > 200]

            if areas_pequenas:
                validacao['alertas'].append(f"√Åreas muito pequenas: talh√µes {areas_pequenas}")
            if areas_grandes:
                validacao['alertas'].append(f"√Åreas muito grandes: talh√µes {areas_grandes}")

    return validacao


def criar_configuracoes_avancadas():
    '''
    Cria interface para configura√ß√µes avan√ßadas (opcional)

    Returns:
        dict: Configura√ß√µes avan√ßadas
    '''
    with st.expander("üîß Configura√ß√µes Avan√ßadas"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**Modelos Hipsom√©tricos:**")

            incluir_prodan = st.checkbox(
                "Incluir modelo Prodan",
                value=True,
                help="Modelo complexo que usa idade (se dispon√≠vel)"
            )

            incluir_nao_lineares = st.checkbox(
                "Incluir modelos n√£o-lineares",
                value=True,
                help="Chapman, Weibull, Mononuclear (mais demorados)"
            )

            tolerancia_ajuste = st.slider(
                "Toler√¢ncia para ajuste",
                min_value=0.001,
                max_value=0.1,
                value=0.01,
                step=0.001,
                format="%.3f",
                help="Toler√¢ncia para converg√™ncia dos modelos"
            )

        with col2:
            st.write("**Processamento:**")

            max_iteracoes = st.number_input(
                "M√°ximo de itera√ß√µes",
                min_value=1000,
                max_value=10000,
                value=5000,
                step=500,
                help="M√°ximo de itera√ß√µes para modelos n√£o-lineares"
            )

            usar_bootstrap = st.checkbox(
                "Usar bootstrap para valida√ß√£o",
                value=False,
                help="Valida√ß√£o adicional (mais demorado)"
            )

            mostrar_detalhes = st.checkbox(
                "Mostrar detalhes dos ajustes",
                value=False,
                help="Exibir informa√ß√µes detalhadas durante ajuste"
            )

    return {
        'incluir_prodan': incluir_prodan,
        'incluir_nao_lineares': incluir_nao_lineares,
        'tolerancia_ajuste': tolerancia_ajuste,
        'max_iteracoes': max_iteracoes,
        'usar_bootstrap': usar_bootstrap,
        'mostrar_detalhes': mostrar_detalhes
    }


def salvar_configuracoes(config):
    '''
    Salva configura√ß√µes no session_state para reutiliza√ß√£o

    Args:
        config: Configura√ß√µes a serem salvas
    '''
    st.session_state['config_inventario'] = config
    st.success("‚úÖ Configura√ß√µes salvas!")


def carregar_configuracoes_salvas():
    '''
    Carrega configura√ß√µes salvas do session_state

    Returns:
        dict: Configura√ß√µes salvas ou None
    '''
    return st.session_state.get('config_inventario', None)


def mostrar_interface_configuracoes_salvas():
    '''
    Mostra interface para gerenciar configura√ß√µes salvas
    '''
    st.sidebar.subheader("üíæ Configura√ß√µes")

    config_salva = carregar_configuracoes_salvas()

    if config_salva:
        st.sidebar.success("‚úÖ Configura√ß√£o salva dispon√≠vel")

        if st.sidebar.button("üîÑ Usar configura√ß√£o salva"):
            st.success("Configura√ß√£o carregada!")
            return config_salva
    else:
        st.sidebar.info("üí° Nenhuma configura√ß√£o salva")

    return None


def exportar_configuracoes(config):
    '''
    Prepara configura√ß√µes para exporta√ß√£o

    Args:
        config: Configura√ß√µes atuais

    Returns:
        str: Configura√ß√µes em formato JSON
    '''
    import json
    from datetime import datetime

    config_export = {
        'data_criacao': datetime.now().isoformat(),
        'versao_sistema': '1.0',
        'configuracoes': config
    }

    return json.dumps(config_export, indent=2, ensure_ascii=False)


def mostrar_botoes_configuracao(config):
    '''
    Mostra bot√µes para a√ß√µes com configura√ß√µes

    Args:
        config: Configura√ß√µes atuais
    '''
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üíæ Salvar Configura√ß√µes"):
            salvar_configuracoes(config)

    with col2:
        config_json = exportar_configuracoes(config)
        st.download_button(
            label="üìÅ Exportar Configura√ß√µes",
            data=config_json,
            file_name="config_inventario.json",
            mime="application/json"
        )

    with col3:
        if st.button("üîÑ Resetar para Padr√£o"):
            st.session_state.clear()
            st.experimental_rerun()