# pages/2_üìä_Modelos_Volum√©tricos.py - VERS√ÉO ADAPTADA PARA CONFIGURA√á√ïES GLOBAIS
"""
Etapa 2: Modelos Volum√©tricos - USANDO CONFIGURA√á√ïES CENTRALIZADAS
Cubagem e an√°lise de modelos de volume com filtros globais
NOVO: Preparado para futuras extens√µes com par√¢metros configur√°veis
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time
from processors.cubagem import processar_cubagem_smalian, calcular_estatisticas_cubagem
from models.volumetrico import ajustar_todos_modelos_volumetricos
from ui.graficos import criar_graficos_modelos
from utils.formatacao import formatar_brasileiro, classificar_qualidade_modelo

# NOVO: Importar configura√ß√µes centralizadas
from config.configuracoes_globais import (
    obter_configuracao_global,
    aplicar_filtros_configuracao_global,
    mostrar_status_configuracao_sidebar
)

st.set_page_config(
    page_title="Modelos Volum√©tricos",
    page_icon="üìä",
    layout="wide"
)


def gerar_key_unica(base_key):
    """Gera uma key √∫nica para evitar conflitos"""
    timestamp = int(time.time() * 1000)
    return f"{base_key}_{timestamp}"


def verificar_prerequisitos():
    """Verifica se pr√©-requisitos est√£o atendidos"""
    problemas = []

    # Verificar dados carregados
    if not hasattr(st.session_state, 'arquivos_carregados') or not st.session_state.arquivos_carregados:
        problemas.append("Dados n√£o carregados")

    # Verificar configura√ß√£o global
    config_global = obter_configuracao_global()
    if not config_global.get('configurado', False):
        problemas.append("Sistema n√£o configurado")

    if problemas:
        st.error("‚ùå Pr√©-requisitos n√£o atendidos:")
        for problema in problemas:
            st.error(f"‚Ä¢ {problema}")

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üè† P√°gina Principal", key="btn_principal_vol"):
                st.switch_page("Principal.py")
        with col2:
            if st.button("‚öôÔ∏è Configura√ß√µes", key="btn_config_vol"):
                st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")

        return False

    return True


def mostrar_configuracao_aplicada_cubagem():
    """Mostra configura√ß√µes aplicadas especificamente para cubagem"""
    config = obter_configuracao_global()

    with st.expander("‚öôÔ∏è Configura√ß√µes Aplicadas na Cubagem"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**üîç Filtros na Cubagem:**")
            st.write(f"‚Ä¢ Di√¢metro m√≠nimo: {config.get('diametro_min', 4.0)} cm")

            talhoes_excluir = config.get('talhoes_excluir', [])
            if talhoes_excluir:
                st.write(f"‚Ä¢ Talh√µes exclu√≠dos: {talhoes_excluir}")
                st.caption("   (√Årvores destes talh√µes n√£o ser√£o usadas)")
            else:
                st.write("‚Ä¢ Talh√µes exclu√≠dos: Nenhum")

        with col2:
            st.write("**üìè M√©todo de Cubagem:**")
            st.write("‚Ä¢ M√©todo: Smalian")
            st.write("‚Ä¢ F√≥rmula: V = (A‚ÇÅ + A‚ÇÇ)/2 √ó L")
            st.write("‚Ä¢ Valida√ß√£o: Autom√°tica")
            st.caption("  Dados inconsistentes s√£o removidos")

    # NOVO: Mostrar configura√ß√µes espec√≠ficas para volum√©tricos (preparado para futuras extens√µes)
    mostrar_configuracoes_volumetricas_avancadas(config)

    # Bot√£o para ajustar configura√ß√µes
    if st.button("üîß Ajustar Configura√ß√µes", key="btn_ajustar_config_vol"):
        st.switch_page("pages/0_‚öôÔ∏è_Configura√ß√µes.py")


def mostrar_configuracoes_volumetricas_avancadas(config):
    """NOVO: Mostra configura√ß√µes avan√ßadas para modelos volum√©tricos"""
    # NOTA: Atualmente modelos volum√©tricos s√£o lineares, mas preparado para futuras extens√µes

    with st.expander("üîß Configura√ß√µes Avan√ßadas dos Modelos Volum√©tricos"):
        st.info("üí° Configura√ß√µes aplicadas nos modelos volum√©tricos")

        col1, col2 = st.columns(2)

        with col1:
            st.write("**üìä Modelos Dispon√≠veis:**")
            st.write("‚Ä¢ Schumacher-Hall (logar√≠tmico)")
            st.write("‚Ä¢ G1 - Goulding (logar√≠tmico)")
            st.write("‚Ä¢ G2 - Linear direto")
            st.write("‚Ä¢ G3 - Spurr (logar√≠tmico)")

            # NOVO: Verificar se h√° configura√ß√µes espec√≠ficas para volum√©tricos
            vol_config = config.get('parametros_vol_nao_lineares', {})
            if vol_config.get('enabled', False):
                st.success("‚úÖ Configura√ß√µes n√£o-lineares habilitadas")
            else:
                st.info("‚ÑπÔ∏è Usando apenas modelos lineares padr√£o")

        with col2:
            st.write("**‚öôÔ∏è Par√¢metros de Qualidade:**")
            st.write("‚Ä¢ Valida√ß√£o autom√°tica de outliers")
            st.write("‚Ä¢ C√°lculo de R¬≤ tradicional")
            st.write("‚Ä¢ An√°lise de res√≠duos")
            st.write("‚Ä¢ Detec√ß√£o de dados inconsistentes")

            # NOVO: Mostrar configura√ß√µes de toler√¢ncia se dispon√≠veis
            tolerancia = config.get('tolerancia_ajuste', 0.01)
            st.write(f"‚Ä¢ Toler√¢ncia para valida√ß√£o: {tolerancia}")


def processar_cubagem_com_filtros():
    """Processa cubagem aplicando filtros das configura√ß√µes globais"""
    st.header("üîÑ Processamento da Cubagem")

    # NOVO: Aplicar filtros √†s √°rvores da cubagem baseado nas configura√ß√µes globais
    config = obter_configuracao_global()
    df_cubagem_original = st.session_state.dados_cubagem

    # Filtrar talh√µes exclu√≠dos na cubagem
    talhoes_excluir = config.get('talhoes_excluir', [])
    if talhoes_excluir:
        df_cubagem_filtrada = df_cubagem_original[~df_cubagem_original['talhao'].isin(talhoes_excluir)]
        st.info(f"üîç Filtros aplicados: Excluindo talh√µes {talhoes_excluir}")

        if len(df_cubagem_filtrada) != len(df_cubagem_original):
            st.write(f"‚Ä¢ Registros originais: {len(df_cubagem_original)}")
            st.write(f"‚Ä¢ Registros ap√≥s filtro: {len(df_cubagem_filtrada)}")
    else:
        df_cubagem_filtrada = df_cubagem_original
        st.info("üîç Nenhum filtro de talh√£o aplicado na cubagem")

    # NOVO: Aplicar filtro de di√¢metro m√≠nimo na cubagem tamb√©m
    diametro_min = config.get('diametro_min', 4.0)
    if 'D_cm' in df_cubagem_filtrada.columns:
        df_cubagem_filtrada = df_cubagem_filtrada[df_cubagem_filtrada['D_cm'] >= diametro_min]
        st.info(f"üîç Filtro de di√¢metro aplicado: >= {diametro_min} cm")

    # Verificar se h√° dados suficientes ap√≥s filtros
    if len(df_cubagem_filtrada) < 10:
        st.error("‚ùå Poucos dados de cubagem ap√≥s aplicar filtros")
        st.info("üí° Ajuste as configura√ß√µes para incluir mais talh√µes")
        return None, None

    # Processar cubagem
    with st.spinner("Processando cubagem pelo m√©todo de Smalian..."):
        volumes_arvore = processar_cubagem_smalian(df_cubagem_filtrada)

    if len(volumes_arvore) < 5:
        st.error("‚ùå Poucos volumes v√°lidos da cubagem ap√≥s filtros")
        return None, None

    # NOVO: Aplicar valida√ß√£o adicional baseada nas configura√ß√µes
    volumes_validados = aplicar_validacao_volumetrica(volumes_arvore, config)

    if len(volumes_validados) != len(volumes_arvore):
        st.info(f"üîç Valida√ß√£o aplicada: {len(volumes_arvore)} ‚Üí {len(volumes_validados)} volumes v√°lidos")

    if len(volumes_validados) < 5:
        st.error("‚ùå Poucos volumes v√°lidos ap√≥s valida√ß√£o")
        return None, None

    # Calcular estat√≠sticas
    stats_cubagem = calcular_estatisticas_cubagem(volumes_validados)

    # Mostrar estat√≠sticas
    st.subheader("üìä Estat√≠sticas da Cubagem (Dados Filtrados)")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("√Årvores Cubadas", stats_cubagem['total_arvores'])
    with col2:
        st.metric("Volume Total", f"{stats_cubagem['volume_total']:.3f} m¬≥")
    with col3:
        st.metric("Volume M√©dio", f"{stats_cubagem['volume_medio']:.4f} m¬≥")
    with col4:
        st.metric("CV Volume", f"{stats_cubagem['cv_volume']:.1f}%")

    # Gr√°ficos da cubagem
    mostrar_graficos_cubagem(volumes_validados, stats_cubagem)

    return volumes_validados, stats_cubagem


def aplicar_validacao_volumetrica(volumes_arvore, config):
    """NOVO: Aplica valida√ß√£o adicional baseada nas configura√ß√µes"""
    df_validado = volumes_arvore.copy()

    # Remover outliers extremos baseado na toler√¢ncia configurada
    tolerancia = config.get('tolerancia_ajuste', 0.01)

    # Calcular limites baseados no percentil
    Q1 = df_validado['V'].quantile(0.25)
    Q3 = df_validado['V'].quantile(0.75)
    IQR = Q3 - Q1

    # Usar toler√¢ncia como fator multiplicador (mais restritivo = menos toler√¢ncia)
    fator_outlier = max(1.5, 3.0 * (1 - tolerancia * 10))  # Varia de 1.5 a 3.0

    limite_inferior = Q1 - fator_outlier * IQR
    limite_superior = Q3 + fator_outlier * IQR

    # Filtrar outliers
    mask_validos = (df_validado['V'] >= limite_inferior) & (df_validado['V'] <= limite_superior)
    df_validado = df_validado[mask_validos]

    # Valida√ß√µes adicionais
    df_validado = df_validado[
        (df_validado['V'] > 0.001) &  # Volume m√≠nimo
        (df_validado['D_cm'] > 0) &  # DAP v√°lido
        (df_validado['H_m'] > 1.3)  # Altura v√°lida
        ]

    return df_validado


def mostrar_graficos_cubagem(volumes_arvore, stats_cubagem):
    """Mostra gr√°ficos da an√°lise de cubagem"""
    col1, col2 = st.columns(2)

    with col1:
        fig, ax = plt.subplots(figsize=(8, 5))
        ax.hist(volumes_arvore['V'], bins=20, alpha=0.7, color='forestgreen', edgecolor='black')
        ax.axvline(stats_cubagem['volume_medio'], color='red', linestyle='--', linewidth=2,
                   label=f'M√©dia: {stats_cubagem["volume_medio"]:.4f} m¬≥')
        ax.set_xlabel('Volume (m¬≥)')
        ax.set_ylabel('Frequ√™ncia')
        ax.set_title('Distribui√ß√£o dos Volumes das √Årvores')
        ax.legend()
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
        plt.close(fig)

    with col2:
        st.markdown("**Estat√≠sticas Descritivas:**")
        st.write(f"‚Ä¢ **M√≠nimo**: {stats_cubagem['volume_min']:.4f} m¬≥")
        st.write(f"‚Ä¢ **M√°ximo**: {stats_cubagem['volume_max']:.4f} m¬≥")
        st.write(f"‚Ä¢ **Mediana**: {volumes_arvore['V'].median():.4f} m¬≥")
        st.write(f"‚Ä¢ **Q1**: {volumes_arvore['V'].quantile(0.25):.4f} m¬≥")
        st.write(f"‚Ä¢ **Q3**: {volumes_arvore['V'].quantile(0.75):.4f} m¬≥")
        st.write(f"‚Ä¢ **Desvio Padr√£o**: {volumes_arvore['V'].std():.4f} m¬≥")

        st.markdown("**Caracter√≠sticas Dendrom√©tricas:**")
        st.write(f"‚Ä¢ **DAP m√©dio**: {stats_cubagem['dap_medio']:.1f} cm")
        st.write(f"‚Ä¢ **Altura m√©dia**: {stats_cubagem['altura_media']:.1f} m")
        st.write(f"‚Ä¢ **Coef. Varia√ß√£o**: {stats_cubagem['cv_volume']:.1f}%")


def executar_analise_volumetrica(volumes_arvore):
    """Executa an√°lise volum√©trica com configura√ß√µes centralizadas"""
    st.header("üöÄ Executando An√°lise Volum√©trica")

    progress_bar = st.progress(0)
    status_text = st.empty()

    try:
        status_text.text("üîÑ Preparando dados para modelagem...")
        progress_bar.progress(0.2)

        # NOVO: Obter configura√ß√µes globais
        config = obter_configuracao_global()

        status_text.text("üßÆ Ajustando modelos volum√©tricos...")
        progress_bar.progress(0.5)

        # NOVO: Passar configura√ß√µes para a fun√ß√£o (preparado para futuras extens√µes)
        resultados, predicoes, melhor_modelo = ajustar_todos_modelos_volumetricos_com_config(volumes_arvore, config)

        progress_bar.progress(1.0)
        status_text.text("‚úÖ An√°lise conclu√≠da!")

        if not resultados:
            st.error("‚ùå Nenhum modelo volum√©trico foi ajustado com sucesso")
            return

        # Salvar resultados com configura√ß√£o aplicada
        st.session_state.resultados_volumetricos = {
            'resultados': resultados,
            'predicoes': predicoes,
            'melhor_modelo': melhor_modelo,
            'volumes': volumes_arvore,
            'config_aplicada': config,
            'timestamp': pd.Timestamp.now()
        }

        st.success(f"üèÜ Melhor modelo: **{melhor_modelo}**")

        # NOVO: Mostrar informa√ß√µes sobre configura√ß√µes aplicadas
        mostrar_info_configuracoes_volumetricas(config, resultados)

        # Mostrar resultados
        mostrar_resultados_volumetricos(resultados, predicoes, volumes_arvore, contexto="novo")

    except Exception as e:
        st.error(f"‚ùå Erro na an√°lise volum√©trica: {e}")
        st.info("üí° Verifique os dados de cubagem e configura√ß√µes")

        # Debug detalhado
        with st.expander("üîç Debug Detalhado"):
            st.write(f"**Tipo do erro**: {type(e).__name__}")
            st.write(f"**Mensagem**: {str(e)}")
            st.write(f"**Volumes dispon√≠veis**: {len(volumes_arvore)} registros")
            st.write(f"**Configura√ß√µes**: {config}")


def ajustar_todos_modelos_volumetricos_com_config(volumes_arvore, config):
    """NOVO: Wrapper que aplica configura√ß√µes aos modelos volum√©tricos"""
    # Por enquanto, modelos volum√©tricos s√£o lineares, mas preparado para extens√µes futuras

    # Aplicar valida√ß√µes baseadas na configura√ß√£o
    tolerancia = config.get('tolerancia_ajuste', 0.01)

    # Usar fun√ß√£o original mas com valida√ß√£o adicional
    resultados, predicoes, melhor_modelo = ajustar_todos_modelos_volumetricos(volumes_arvore)

    # NOVO: Aplicar filtros de qualidade baseados na configura√ß√£o
    if resultados:
        # Filtrar modelos com R¬≤ muito baixo baseado na toler√¢ncia
        r2_minimo = max(0.5, 1.0 - tolerancia * 10)  # Varia de 0.5 a 0.9

        resultados_filtrados = {}
        predicoes_filtradas = {}

        for modelo, resultado in resultados.items():
            if resultado['r2'] >= r2_minimo:
                resultados_filtrados[modelo] = resultado
                predicoes_filtradas[modelo] = predicoes[modelo]
            else:
                st.warning(f"‚ö†Ô∏è Modelo {modelo} removido (R¬≤ = {resultado['r2']:.3f} < {r2_minimo:.3f})")

        if resultados_filtrados:
            # Redeterminar melhor modelo ap√≥s filtros
            melhor_modelo_filtrado = max(resultados_filtrados.keys(), key=lambda k: resultados_filtrados[k]['r2'])
            return resultados_filtrados, predicoes_filtradas, melhor_modelo_filtrado
        else:
            st.warning("‚ö†Ô∏è Todos os modelos foram filtrados. Usando resultados originais.")

    return resultados, predicoes, melhor_modelo


def mostrar_info_configuracoes_volumetricas(config, resultados):
    """Mostra informa√ß√µes sobre como configura√ß√µes foram aplicadas"""
    with st.expander("‚ÑπÔ∏è Como as Configura√ß√µes Foram Aplicadas"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**üîß Configura√ß√µes Usadas:**")
            st.write(f"‚Ä¢ Di√¢metro m√≠nimo: {config.get('diametro_min', 4.0)} cm")
            talhoes_excluir = config.get('talhoes_excluir', [])
            if talhoes_excluir:
                st.write(f"‚Ä¢ Talh√µes exclu√≠dos: {talhoes_excluir}")
            else:
                st.write("‚Ä¢ Talh√µes exclu√≠dos: Nenhum")

            st.write(f"‚Ä¢ Toler√¢ncia: {config.get('tolerancia_ajuste', 0.01)}")

        with col2:
            st.write("**üìä Resultados Obtidos:**")
            st.write(f"‚Ä¢ Total de modelos: {len(resultados)}")
            st.write(f"‚Ä¢ M√©todo de cubagem: Smalian")
            st.write(f"‚Ä¢ Valida√ß√£o: Autom√°tica")

            # NOVO: Mostrar informa√ß√µes sobre qualidade dos modelos
            if resultados:
                r2_medio = sum(r['r2'] for r in resultados.values()) / len(resultados)
                st.write(f"‚Ä¢ R¬≤ m√©dio: {r2_medio:.3f}")

        st.info("""
        üí° **Nota**: Os filtros s√£o aplicados na fase de cubagem e valida√ß√£o, 
        garantindo que apenas dados v√°lidos sejam usados na modelagem volum√©trica.
        """)


def mostrar_resultados_volumetricos(resultados, predicoes, volumes_arvore, contexto="novo"):
    """
    Mostra resultados dos modelos volum√©tricos - VERS√ÉO CORRIGIDA PARA KEYS

    Args:
        contexto: "novo" para execu√ß√£o atual, "salvo" para resultados salvos
    """
    st.header("üìä Resultados dos Modelos Volum√©tricos")

    # Adicionar identificador do contexto
    if contexto == "salvo":
        st.info("‚ÑπÔ∏è Exibindo resultados salvos da execu√ß√£o anterior")

    # Criar sufixo √∫nico baseado no contexto e timestamp
    sufixo = f"_{contexto}_{int(time.time())}"

    # Tabs para organizar resultados
    tab1, tab2, tab3, tab4 = st.tabs(["üèÜ Ranking", "üìä Gr√°ficos", "üî¢ Coeficientes", "üíæ Downloads"])

    with tab1:
        mostrar_ranking_volumetricos(resultados)

    with tab2:
        try:
            criar_graficos_modelos(volumes_arvore, resultados, predicoes, 'volumetrico')
        except Exception as e:
            st.error(f"Erro ao criar gr√°ficos: {e}")
            st.info("Recarregue a p√°gina se o erro persistir")

    with tab3:
        mostrar_coeficientes_volumetricos(resultados)

    with tab4:
        mostrar_downloads_volumetricos(resultados, predicoes, volumes_arvore, sufixo)


def mostrar_ranking_volumetricos(resultados):
    """Mostra ranking dos modelos volum√©tricos"""
    st.subheader("üèÜ Ranking dos Modelos")

    ranking_data = []
    for modelo, resultado in resultados.items():
        r2 = resultado['r2']
        rmse = resultado['rmse']
        qualidade = classificar_qualidade_modelo(r2)

        ranking_data.append({
            'Ranking': 0,
            'Modelo': modelo,
            'R¬≤': f"{r2:.4f}",
            'RMSE': f"{rmse:.4f}",
            'Qualidade': qualidade
        })

    # Ordenar por R¬≤
    df_ranking = pd.DataFrame(ranking_data)
    df_ranking = df_ranking.sort_values('R¬≤', ascending=False)
    df_ranking['Ranking'] = range(1, len(df_ranking) + 1)

    st.dataframe(df_ranking, hide_index=True, use_container_width=True)

    # Destaque do melhor
    melhor = df_ranking.iloc[0]
    st.success(f"üèÜ **Melhor modelo**: {melhor['Modelo']} (R¬≤ = {melhor['R¬≤']})")


def mostrar_coeficientes_volumetricos(resultados):
    """Mostra coeficientes dos modelos volum√©tricos"""
    st.subheader("üî¢ Coeficientes dos Modelos")

    for modelo, resultado in resultados.items():
        with st.expander(f"üìä {modelo} - Coeficientes"):
            modelo_obj = resultado.get('modelo')
            if modelo_obj and hasattr(modelo_obj, 'modelo'):
                try:
                    coefs = modelo_obj.modelo.coef_
                    intercept = modelo_obj.modelo.intercept_

                    st.write(f"**Intercepto (Œ≤‚ÇÄ)**: {intercept:.6f}")

                    # Nomes espec√≠ficos dos coeficientes por modelo
                    if modelo == 'Schumacher':
                        nomes_coef = ['Œ≤‚ÇÅ (ln D)', 'Œ≤‚ÇÇ (ln H)']
                    elif modelo == 'G1':
                        nomes_coef = ['Œ≤‚ÇÅ (ln D)', 'Œ≤‚ÇÇ (1/D)']
                    elif modelo == 'G2':
                        nomes_coef = ['Œ≤‚ÇÅ (D¬≤)', 'Œ≤‚ÇÇ (D¬≤H)', 'Œ≤‚ÇÉ (H)']
                    elif modelo == 'G3':
                        nomes_coef = ['Œ≤‚ÇÅ (ln D¬≤H)']
                    else:
                        nomes_coef = [f'Œ≤{i + 1}' for i in range(len(coefs))]

                    for nome, coef in zip(nomes_coef, coefs):
                        st.write(f"**{nome}**: {coef:.6f}")

                except Exception as e:
                    st.info(f"Coeficientes n√£o dispon√≠veis: {e}")

            # Estat√≠sticas do modelo
            st.write(f"**R¬≤**: {resultado['r2']:.4f}")
            st.write(f"**RMSE**: {resultado['rmse']:.4f}")

            # Interpreta√ß√£o espec√≠fica
            if modelo == 'Schumacher':
                st.info(
                    "üí° **Interpreta√ß√£o**: Œ≤‚ÇÅ e Œ≤‚ÇÇ representam elasticidades (% de mudan√ßa em V para 1% de mudan√ßa na vari√°vel)")


def mostrar_downloads_volumetricos(resultados, predicoes, volumes_arvore, sufixo=""):
    """Mostra op√ß√µes de download - VERS√ÉO COM KEYS √öNICAS"""
    st.subheader("üíæ Downloads")

    # Ranking dos modelos
    ranking_data = []
    for modelo, resultado in resultados.items():
        ranking_data.append({
            'Modelo': modelo,
            'R2': resultado['r2'],
            'RMSE': resultado['rmse'],
            'Qualidade': classificar_qualidade_modelo(resultado['r2'])
        })

    df_ranking = pd.DataFrame(ranking_data).sort_values('R2', ascending=False)

    col1, col2, col3 = st.columns(3)

    with col1:
        csv_ranking = df_ranking.to_csv(index=False)
        st.download_button(
            "üìä Ranking dos Modelos",
            csv_ranking,
            "ranking_modelos_volumetricos.csv",
            "text/csv",
            key=gerar_key_unica(f"download_ranking_vol{sufixo}")
        )

    with col2:
        # Dados com predi√ß√µes
        df_resultado = volumes_arvore.copy()
        for modelo, pred in predicoes.items():
            df_resultado[f'pred_{modelo}'] = pred
            df_resultado[f'residuo_{modelo}'] = volumes_arvore['V'] - pred

        csv_dados = df_resultado.to_csv(index=False)
        st.download_button(
            "üìÑ Dados com Predi√ß√µes",
            csv_dados,
            "dados_predicoes_volumetricas.csv",
            "text/csv",
            key=gerar_key_unica(f"download_dados_vol{sufixo}")
        )

    with col3:
        # NOVO: Relat√≥rio com configura√ß√µes
        relatorio = gerar_relatorio_volumetrico_com_configuracoes(resultados, df_ranking)
        st.download_button(
            "üìÑ Relat√≥rio com Configura√ß√µes",
            relatorio,
            "relatorio_volumetricos_configuracoes.md",
            "text/markdown",
            key=gerar_key_unica(f"download_relatorio_vol{sufixo}")
        )


def gerar_relatorio_volumetrico_com_configuracoes(resultados, df_ranking):
    """NOVO: Gera relat√≥rio incluindo configura√ß√µes aplicadas"""
    config = obter_configuracao_global()
    melhor = df_ranking.iloc[0]

    relatorio = f"""# RELAT√ìRIO - MODELOS VOLUM√âTRICOS COM CONFIGURA√á√ïES

## üèÜ MELHOR MODELO
**{melhor['Modelo']}** - {melhor['Qualidade']}
- R¬≤: {melhor['R2']:.4f}
- RMSE: {melhor['RMSE']:.4f}

## ‚öôÔ∏è CONFIGURA√á√ïES APLICADAS
### Filtros na Cubagem:
- Di√¢metro m√≠nimo: {config.get('diametro_min', 4.0)} cm
- Talh√µes exclu√≠dos: {config.get('talhoes_excluir', [])}
- Toler√¢ncia de valida√ß√£o: {config.get('tolerancia_ajuste', 0.01)}

### M√©todo de Cubagem:
- M√©todo: Smalian
- F√≥rmula: V = (A‚ÇÅ + A‚ÇÇ)/2 √ó L
- Precis√£o: ¬±2-5% do volume real
- Valida√ß√£o autom√°tica de outliers: ‚úÖ

### Configura√ß√µes de Qualidade:
- R¬≤ m√≠nimo aplicado: {max(0.5, 1.0 - config.get('tolerancia_ajuste', 0.01) * 10):.3f}
- Filtros de outliers autom√°ticos: ‚úÖ
- Valida√ß√£o de dados inconsistentes: ‚úÖ

## üìä RANKING COMPLETO
"""

    for i, (_, row) in enumerate(df_ranking.iterrows(), 1):
        relatorio += f"\n{i}. **{row['Modelo']}** - {row['Qualidade']}"
        relatorio += f"\n   - R¬≤: {row['R2']:.4f}, RMSE: {row['RMSE']:.4f}\n"

    relatorio += f"""
## üìà RESUMO DA AN√ÅLISE
- Total de modelos avaliados: {len(resultados)}
- Modelos logar√≠tmicos: {len([m for m in resultados.keys() if m in ['Schumacher', 'G1', 'G3']])}
- Modelos lineares: {len([m for m in resultados.keys() if m in ['G2']])}
- Configura√ß√£o centralizada aplicada: ‚úÖ
- Valida√ß√£o autom√°tica aplicada: ‚úÖ
- Timestamp: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}

## üéØ RECOMENDA√á√ÉO
Use o modelo **{melhor['Modelo']}** para estimativas volum√©tricas neste povoamento.

## üîß CONFIGURA√á√ïES T√âCNICAS
- Filtros aplicados na cubagem conforme configura√ß√£o global
- Outliers removidos automaticamente baseado na toler√¢ncia configurada
- Modelos com baixo R¬≤ filtrados automaticamente
- Consist√™ncia garantida com outras etapas do sistema

---
*Relat√≥rio gerado pelo Sistema de Invent√°rio Florestal com Configura√ß√µes Centralizadas*
*Cubagem processada pelo m√©todo de Smalian com valida√ß√£o autom√°tica*
"""

    return relatorio


def mostrar_fundamentos_smalian():
    """Mostra fundamentos do m√©todo de Smalian"""
    with st.expander("üìè M√©todo de Smalian - Fundamentos Te√≥ricos"):
        col1, col2 = st.columns([3, 1])

        with col1:
            st.markdown("""
            **M√©todo de Smalian** para c√°lculo do volume de se√ß√µes:

            **F√≥rmula Fundamental:**
            """)
            st.latex(r"V = \frac{A_1 + A_2}{2} \times L")

            st.markdown("""
            **Onde:**
            - **V** = Volume da se√ß√£o (m¬≥)
            - **A‚ÇÅ** = √Årea da se√ß√£o inferior (m¬≤)
            - **A‚ÇÇ** = √Årea da se√ß√£o superior (m¬≤)
            - **L** = Comprimento da se√ß√£o (m)

            **√Årea seccional:** A = œÄ √ó (d/2)¬≤

            **Princ√≠pio:** Assume que cada se√ß√£o tem formato de tronco de cone,
            calculando o volume pela m√©dia das √°reas das bases multiplicada pela altura.
            """)

            st.info("""
            üí° **Caracter√≠sticas do M√©todo:**
            - Assume forma tronco-c√¥nica entre se√ß√µes
            - Precis√£o adequada para se√ß√µes de 2m
            - M√©todo padr√£o internacional (IUFRO)
            - Erro t√≠pico: ¬±2-5% comparado ao volume real
            """)

        with col2:
            st.info("""
            **üîç Filtros Aplicados:**

            Os filtros das configura√ß√µes globais s√£o aplicados:

            ‚Ä¢ Talh√µes exclu√≠dos
            ‚Ä¢ Di√¢metro m√≠nimo
            ‚Ä¢ Valida√ß√£o autom√°tica
            ‚Ä¢ Toler√¢ncia configur√°vel

            Isso garante consist√™ncia entre todas as etapas.
            """)


def main():
    # Verificar pr√©-requisitos
    if not verificar_prerequisitos():
        return

    st.title("üìä Modelos Volum√©tricos")
    st.markdown("### Cubagem e An√°lise de Volume com Configura√ß√µes Centralizadas")

    # Mostrar status da configura√ß√£o na sidebar
    mostrar_status_configuracao_sidebar()

    # Bot√£o para limpar resultados anteriores (evita conflitos de keys)
    if st.button("üóëÔ∏è Limpar Resultados Anteriores", key="limpar_resultados_vol"):
        if 'resultados_volumetricos' in st.session_state:
            del st.session_state