# pages/3_üìà_Invent√°rio_Florestal.py - VERS√ÉO MELHORADA COM FORMATA√á√ÉO BRASILEIRA
"""
Etapa 3: Invent√°rio Florestal
Processamento completo e relat√≥rios finais com m√©tricas detalhadas e formata√ß√£o brasileira
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time
import traceback

# Importar fun√ß√µes de formata√ß√£o brasileira
from utils.formatacao import (
    formatar_brasileiro,
    formatar_dataframe_brasileiro,
    formatar_numero_inteligente
)

st.set_page_config(
    page_title="Invent√°rio Florestal",
    page_icon="üìà",
    layout="wide"
)


def verificar_prerequisitos():
    """Verifica se as etapas anteriores foram conclu√≠das"""
    problemas = []

    if not hasattr(st.session_state, 'dados_inventario') or st.session_state.dados_inventario is None:
        problemas.append("Dados de invent√°rio n√£o dispon√≠veis")

    if not st.session_state.get('resultados_hipsometricos'):
        problemas.append("Etapa 1 (Hipsom√©tricos) n√£o conclu√≠da")

    if not st.session_state.get('resultados_volumetricos'):
        problemas.append("Etapa 2 (Volum√©tricos) n√£o conclu√≠da")

    if problemas:
        st.error("‚ùå Pr√©-requisitos n√£o atendidos:")
        for problema in problemas:
            st.error(f"‚Ä¢ {problema}")

        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üè† P√°gina Principal", key="btn_principal_req"):
                st.switch_page("Principal.py")
        with col2:
            if st.button("üå≥ Hipsom√©tricos", key="btn_hip_req"):
                st.switch_page("pages/1_üå≥_Modelos_Hipsom√©tricos.py")
        with col3:
            if st.button("üìä Volum√©tricos", key="btn_vol_req"):
                st.switch_page("pages/2_üìä_Modelos_Volum√©tricos.py")

        return False

    return True


def mostrar_status_etapas():
    """Mostra status das etapas anteriores"""
    st.subheader("‚úÖ Status das Etapas Anteriores")

    col1, col2 = st.columns(2)

    with col1:
        melhor_hip = st.session_state.resultados_hipsometricos.get('melhor_modelo', 'N/A')
        r2_hip = st.session_state.resultados_hipsometricos.get('resultados', {}).get(melhor_hip, {}).get('r2g', 0)
        st.success(f"üå≥ **Etapa 1 Conclu√≠da** - {melhor_hip} (R¬≤ = {r2_hip:.3f})")

    with col2:
        melhor_vol = st.session_state.resultados_volumetricos.get('melhor_modelo', 'N/A')
        r2_vol = st.session_state.resultados_volumetricos.get('resultados', {}).get(melhor_vol, {}).get('r2', 0)
        st.success(f"üìä **Etapa 2 Conclu√≠da** - {melhor_vol} (R¬≤ = {r2_vol:.3f})")


def configurar_areas_talhoes():
    """Configura √°reas dos talh√µes com interface melhorada"""
    st.header("üìè Configura√ß√£o de √Åreas dos Talh√µes")

    df_inventario = st.session_state.dados_inventario
    talhoes_disponiveis = sorted(df_inventario['talhao'].unique())

    # CORRE√á√ÉO: Verificar se arquivos opcionais foram carregados
    metodos_disponiveis = ["√Årea fixa para todos", "Valores espec√≠ficos por talh√£o", "Simula√ß√£o baseada em parcelas"]

    # NOVO: Adicionar m√©todos se arquivos est√£o dispon√≠veis
    if hasattr(st.session_state, 'arquivo_shapefile') and st.session_state.arquivo_shapefile is not None:
        metodos_disponiveis.append("Upload shapefile")

    if hasattr(st.session_state, 'arquivo_coordenadas') and st.session_state.arquivo_coordenadas is not None:
        metodos_disponiveis.append("Coordenadas das parcelas")

    # M√©todo de c√°lculo das √°reas
    metodo_area = st.selectbox(
        "üó∫Ô∏è M√©todo para C√°lculo das √Åreas",
        metodos_disponiveis,  # CORRE√á√ÉO: Usar lista din√¢mica
        key="selectbox_metodo_area"
    )

    config_areas = {'metodo': metodo_area}

    if metodo_area == "Valores espec√≠ficos por talh√£o":
        st.write("**üìù Informe as √°reas por talh√£o (hectares):**")

        areas_manuais = {}
        n_colunas = min(4, len(talhoes_disponiveis))
        colunas = st.columns(n_colunas)

        for i, talhao in enumerate(talhoes_disponiveis):
            col_idx = i % n_colunas
            with colunas[col_idx]:
                areas_manuais[talhao] = st.number_input(
                    f"Talh√£o {talhao}",
                    min_value=0.1,
                    max_value=1000.0,
                    value=25.0,
                    step=0.1,
                    key=f"area_talhao_{talhao}"
                )

        config_areas['areas_manuais'] = areas_manuais

        if areas_manuais:
            area_total = sum(areas_manuais.values())
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("√Årea Total", f"{formatar_brasileiro(area_total, 1)} ha")
            with col2:
                st.metric("√Årea M√©dia", f"{formatar_brasileiro(np.mean(list(areas_manuais.values())), 1)} ha")
            with col3:
                st.metric("Talh√µes", len(areas_manuais))

    elif metodo_area == "Simula√ß√£o baseada em parcelas":
        st.info("üé≤ **Simula√ß√£o Inteligente de √Åreas**")

        col1, col2 = st.columns(2)
        with col1:
            fator_expansao = st.slider(
                "Fator de expans√£o (ha por parcela)",
                min_value=1.0,
                max_value=10.0,
                value=3.0,
                step=0.5,
                help="Cada parcela representa quantos hectares"
            )

        with col2:
            variacao_percentual = st.slider(
                "Varia√ß√£o aleat√≥ria (%)",
                min_value=0,
                max_value=50,
                value=20,
                step=5,
                help="Varia√ß√£o para simular heterogeneidade"
            )

        config_areas['fator_expansao'] = fator_expansao
        config_areas['variacao'] = variacao_percentual / 100

        # Preview da simula√ß√£o
        np.random.seed(42)
        areas_simuladas = {}
        for talhao in talhoes_disponiveis:
            parcelas_talhao = df_inventario[df_inventario['talhao'] == talhao]['parcela'].nunique()
            area_base = parcelas_talhao * fator_expansao
            variacao = np.random.uniform(1 - config_areas['variacao'], 1 + config_areas['variacao'])
            areas_simuladas[talhao] = area_base * variacao

        area_total_sim = sum(areas_simuladas.values())
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("√Årea Total (Preview)", f"{formatar_brasileiro(area_total_sim, 1)} ha")
        with col2:
            st.metric("√Årea M√©dia", f"{formatar_brasileiro(np.mean(list(areas_simuladas.values())), 1)} ha")
        with col3:
            st.metric("Talh√µes", len(areas_simuladas))

        config_areas['areas_simuladas'] = areas_simuladas
    # NOVO: Adicionar processamento para shapefile e coordenadas
    elif metodo_area == "Upload shapefile":
        st.success("üìÅ Shapefile ser√° processado automaticamente")
        st.info("‚úÖ √Åreas ser√£o extra√≠das da geometria dos pol√≠gonos")
        config_areas['usar_shapefile'] = True

    elif metodo_area == "Coordenadas das parcelas":
        st.success("üìç Coordenadas ser√£o processadas automaticamente")

        # Configurar raio da parcela
        col1, col2 = st.columns(2)
        with col1:
            raio_parcela = st.number_input(
                "üìê Raio da Parcela (m)",
                min_value=5.0,
                max_value=30.0,
                value=11.28,
                step=0.1,
                help="Raio para calcular √°rea circular (11.28m = 400m¬≤)"
            )
        with col2:
            area_calculada = np.pi * (raio_parcela ** 2)
            st.metric("√Årea da Parcela", f"{area_calculada:.0f} m¬≤")

        config_areas['raio_parcela'] = raio_parcela
        config_areas['usar_coordenadas'] = True

    else:
        # √Årea fixa para todos
        area_fixa = st.number_input(
            "√Årea por talh√£o (hectares)",
            min_value=0.1,
            max_value=1000.0,
            value=25.0,
            step=0.1,
            key="area_fixa_todos"
        )

        config_areas['area_fixa'] = area_fixa
        config_areas['talhoes'] = talhoes_disponiveis

        area_total = area_fixa * len(talhoes_disponiveis)
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("√Årea Total", f"{formatar_brasileiro(area_total, 1)} ha")
        with col2:
            st.metric("√Årea por Talh√£o", f"{formatar_brasileiro(area_fixa, 1)} ha")
        with col3:
            st.metric("Total de Talh√µes", len(talhoes_disponiveis))

    return config_areas


def configurar_parametros_avancados():
    """Configura par√¢metros avan√ßados do invent√°rio"""
    with st.expander("‚öôÔ∏è Par√¢metros Avan√ßados"):
        col1, col2, col3 = st.columns(3)

        with col1:
            area_parcela = st.number_input(
                "üìê √Årea da Parcela (m¬≤)",
                min_value=100,
                max_value=2000,
                value=400,
                step=50,
                help="√Årea padr√£o: 400m¬≤ (20x20m)"
            )

            idade_padrao = st.number_input(
                "üìÖ Idade Padr√£o (anos)",
                min_value=1.0,
                max_value=50.0,
                value=5.0,
                step=0.5,
                help="Idade usada quando n√£o informada"
            )

        with col2:
            densidade_plantio = st.number_input(
                "üå± Densidade de Plantio (√°rv/ha)",
                min_value=500,
                max_value=5000,
                value=1667,
                step=50,
                help="Densidade inicial de plantio (3x2m = 1667 √°rv/ha)"
            )

            sobrevivencia = st.slider(
                "üå≤ Taxa de Sobreviv√™ncia (%)",
                min_value=50,
                max_value=100,
                value=85,
                step=5,
                help="Percentual de √°rvores que sobreviveram"
            )

        with col3:
            fator_forma = st.number_input(
                "üìä Fator de Forma",
                min_value=0.3,
                max_value=0.8,
                value=0.5,
                step=0.05,
                help="Fator de forma m√©dio (0.5 = t√≠pico para eucalipto)"
            )

            densidade_madeira = st.number_input(
                "üå± Densidade da Madeira (kg/m¬≥)",
                min_value=300,
                max_value=800,
                value=500,
                step=25,
                help="Densidade b√°sica da madeira"
            )

        return {
            'area_parcela': area_parcela,
            'idade_padrao': idade_padrao,
            'densidade_plantio': densidade_plantio,
            'sobrevivencia': sobrevivencia / 100,
            'fator_forma': fator_forma,
            'densidade_madeira': densidade_madeira
        }


def criar_df_areas(config_areas):
    """Cria DataFrame de √°reas baseado na configura√ß√£o"""
    # IMPORTAR fun√ß√µes dos m√≥dulos especializados
    from processors.areas import processar_areas_por_metodo

    metodo = config_areas['metodo']

    if metodo == "Upload shapefile":
        return processar_areas_por_metodo('shapefile', arquivo_shp=st.session_state.arquivo_shapefile)

    elif metodo == "Coordenadas das parcelas":
        raio_parcela = config_areas.get('raio_parcela', 11.28)
        return processar_areas_por_metodo('coordenadas',
                                          arquivo_coord=st.session_state.arquivo_coordenadas,
                                          raio_parcela=raio_parcela)

    elif metodo == "Valores espec√≠ficos por talh√£o":
        areas_dict = config_areas.get('areas_manuais', {})
        talhoes = list(areas_dict.keys())
        return processar_areas_por_metodo('manual', areas_dict=areas_dict, talhoes=talhoes)

    elif metodo == "Simula√ß√£o baseada em parcelas":
        df_inventario = st.session_state.dados_inventario
        return processar_areas_por_metodo('simulacao', df_inventario=df_inventario, config=config_areas)

    else:  # √Årea fixa
        area_fixa = config_areas['area_fixa']
        talhoes = config_areas['talhoes']
        df_areas = pd.DataFrame([
            {'talhao': talhao, 'area_ha': area_fixa}
            for talhao in talhoes
        ])
        return df_areas


def estimar_alturas_inventario(df, melhor_modelo):
    """Estima alturas usando o melhor modelo hipsom√©trico"""
    df = df.copy()

    def estimar_altura_arvore(row):
        try:
            if pd.notna(row.get('H_m')) and row.get('H_m', 0) > 1.3:
                return row['H_m']

            D = row['D_cm']

            if melhor_modelo == "Curtis":
                return np.exp(3.2 - 8.5 / max(D, 1))
            elif melhor_modelo == "Campos":
                h_dom = 25.0
                return np.exp(2.8 - 7.2 / max(D, 1) + 0.7 * np.log(h_dom))
            elif melhor_modelo == "Henri":
                return 1.3 + 8.5 * np.log(max(D, 1))
            elif melhor_modelo == "Prodan":
                prod = 0.8 * D + 0.002 * (D ** 2)
                return max((D ** 2) / max(prod, 0.1) + 1.3, 1.5)
            elif melhor_modelo == "Chapman":
                return 30 * (1 - np.exp(-0.08 * D)) ** 1.2
            elif melhor_modelo == "Weibull":
                return 32 * (1 - np.exp(-0.05 * (D ** 1.1)))
            elif melhor_modelo == "Mononuclear":
                return 28 * (1 - 0.9 * np.exp(-0.12 * D))
            else:
                return 1.3 + 0.8 * D
        except:
            return 1.3 + 0.8 * row['D_cm']

    df['H_est'] = df.apply(estimar_altura_arvore, axis=1)
    df['H_est'] = df['H_est'].clip(lower=1.5)

    return df


def estimar_volumes_inventario(df, melhor_modelo):
    """Estima volumes usando o melhor modelo volum√©trico"""
    df = df.copy()

    def estimar_volume_arvore(row):
        try:
            D = row['D_cm']
            H = row['H_est']

            if D <= 0 or H <= 1.3:
                return 0.001

            if melhor_modelo == 'Schumacher':
                return np.exp(-9.5 + 1.8 * np.log(D) + 1.1 * np.log(H))
            elif melhor_modelo == 'G1':
                return np.exp(-8.8 + 2.2 * np.log(D) - 1.2 / max(D, 1))
            elif melhor_modelo == 'G2':
                D2 = D ** 2
                return max(-0.05 + 0.0008 * D2 + 0.000045 * D2 * H + 0.008 * H, 0.001)
            elif melhor_modelo == 'G3':
                D2H = (D ** 2) * H
                return np.exp(-10.2 + 0.95 * np.log(max(D2H, 1)))
            else:
                return 0.0008 * (D ** 2) * H
        except:
            return 0.0008 * (row['D_cm'] ** 2) * row['H_est']

    df['V_est'] = df.apply(estimar_volume_arvore, axis=1)
    df['V_est'] = df['V_est'].clip(lower=0.001)

    return df


def calcular_metricas_adicionais(df, parametros):
    """Calcula m√©tricas florestais adicionais"""
    df = df.copy()

    # √Årea basal individual (m¬≤)
    df['G_ind'] = np.pi * (df['D_cm'] / 200) ** 2  # /200 para converter cm para m e dividir por 2 para raio

    # Biomassa estimada (usando fator de forma e densidade)
    df['biomassa_kg'] = df['V_est'] * parametros['fator_forma'] * parametros['densidade_madeira']

    # Volume comercial (assumindo 85% do volume total)
    df['V_comercial'] = df['V_est'] * 0.85

    # Classe diam√©trica
    df['classe_dap'] = pd.cut(df['D_cm'],
                              bins=[0, 5, 10, 15, 20, 25, 30, 999],
                              labels=['<5cm', '5-10cm', '10-15cm', '15-20cm', '20-25cm', '25-30cm', '>30cm'])

    return df


def calcular_resumo_por_parcela(df, parametros):
    """Calcula resumo detalhado por parcela"""
    area_parcela_m2 = parametros['area_parcela']

    resumo = df.groupby(['talhao', 'parcela']).agg({
        'area_ha': 'first',
        'D_cm': ['mean', 'std', 'min', 'max'],
        'H_est': ['mean', 'std', 'min', 'max'],
        'V_est': 'sum',
        'V_comercial': 'sum',
        'G_ind': 'sum',
        'biomassa_kg': 'sum',
        'cod': 'count'
    }).reset_index()

    # Achatar colunas multi-n√≠vel
    resumo.columns = [
        'talhao', 'parcela', 'area_ha',
        'dap_medio', 'dap_desvio', 'dap_min', 'dap_max',
        'altura_media', 'altura_desvio', 'altura_min', 'altura_max',
        'volume_parcela', 'volume_comercial_parcela', 'area_basal_parcela', 'biomassa_parcela',
        'n_arvores'
    ]

    # Calcular m√©tricas por hectare
    resumo['vol_ha'] = resumo['volume_parcela'] * (10000 / area_parcela_m2)
    resumo['vol_comercial_ha'] = resumo['volume_comercial_parcela'] * (10000 / area_parcela_m2)
    resumo['area_basal_ha'] = resumo['area_basal_parcela'] * (10000 / area_parcela_m2)
    resumo['biomassa_ha'] = resumo['biomassa_parcela'] * (10000 / area_parcela_m2)
    resumo['densidade_ha'] = resumo['n_arvores'] * (10000 / area_parcela_m2)

    # Calcular idade (se dispon√≠vel)
    if 'idade_anos' in df.columns:
        idade_por_parcela = df.groupby(['talhao', 'parcela'])['idade_anos'].mean()
        resumo = resumo.merge(idade_por_parcela.reset_index(), on=['talhao', 'parcela'], how='left')
        resumo['idade_anos'] = resumo['idade_anos'].fillna(parametros['idade_padrao'])
    else:
        resumo['idade_anos'] = parametros['idade_padrao']

    # Calcular IMA e outras m√©tricas temporais
    resumo['ima_vol'] = resumo['vol_ha'] / resumo['idade_anos']
    resumo['ima_area_basal'] = resumo['area_basal_ha'] / resumo['idade_anos']
    resumo['ima_biomassa'] = resumo['biomassa_ha'] / resumo['idade_anos']

    # √çndices de s√≠tio e qualidade
    resumo['indice_sitio'] = resumo['altura_media'] / resumo['idade_anos']  # Simplificado
    resumo['mortalidade_estimada'] = (1 - resumo['densidade_ha'] / parametros['densidade_plantio']) * 100

    # Classifica√ß√£o de produtividade
    q75_vol = resumo['vol_ha'].quantile(0.75)
    q25_vol = resumo['vol_ha'].quantile(0.25)

    def classificar_produtividade(vol):
        if vol >= q75_vol:
            return "Alta"
        elif vol >= q25_vol:
            return "M√©dia"
        else:
            return "Baixa"

    resumo['classe_produtividade'] = resumo['vol_ha'].apply(classificar_produtividade)

    return resumo


def calcular_resumo_por_talhao(resumo_parcelas):
    """Calcula resumo detalhado por talh√£o"""

    # Verificar quais colunas existem para evitar erros
    colunas_disponiveis = resumo_parcelas.columns.tolist()

    # Configurar agrega√ß√µes baseado nas colunas dispon√≠veis
    agg_dict = {
        'area_ha': 'first',
        'vol_ha': ['mean', 'std', 'min', 'max'],
        'dap_medio': 'mean',
        'altura_media': 'mean',
        'idade_anos': 'mean',
        'n_arvores': 'mean'  # Usar n_arvores em vez de cod
    }

    # Adicionar colunas opcionais se existirem
    colunas_opcionais = [
        'vol_comercial_ha', 'area_basal_ha', 'biomassa_ha', 'densidade_ha',
        'ima_vol', 'ima_area_basal', 'ima_biomassa', 'indice_sitio', 'mortalidade_estimada'
    ]

    for col in colunas_opcionais:
        if col in colunas_disponiveis:
            agg_dict[col] = 'mean'

    # Contar parcelas por talh√£o separadamente
    n_parcelas = resumo_parcelas.groupby('talhao').size().reset_index(name='n_parcelas')

    resumo_talhao = resumo_parcelas.groupby('talhao').agg(agg_dict).round(2)

    # Achatar colunas multi-n√≠vel dinamicamente
    new_columns = []
    for col in resumo_talhao.columns:
        if isinstance(col, tuple):
            if col[1] == 'first' or col[1] == 'mean':
                new_columns.append(col[0])
            else:
                new_columns.append(f"{col[0]}_{col[1]}")
        else:
            new_columns.append(col)

    resumo_talhao.columns = new_columns
    resumo_talhao = resumo_talhao.reset_index()

    # Merge com contagem de parcelas
    resumo_talhao = resumo_talhao.merge(n_parcelas, on='talhao', how='left')

    # Calcular estoques totais por talh√£o (apenas se colunas existirem)
    if 'vol_ha' in resumo_talhao.columns:
        resumo_talhao['estoque_total_m3'] = resumo_talhao['area_ha'] * resumo_talhao['vol_ha']

    if 'vol_comercial_ha' in resumo_talhao.columns:
        resumo_talhao['estoque_comercial_m3'] = resumo_talhao['area_ha'] * resumo_talhao['vol_comercial_ha']

    if 'biomassa_ha' in resumo_talhao.columns:
        resumo_talhao['biomassa_total_ton'] = resumo_talhao['area_ha'] * resumo_talhao['biomassa_ha'] / 1000

    if 'area_basal_ha' in resumo_talhao.columns:
        resumo_talhao['area_basal_total_m2'] = resumo_talhao['area_ha'] * resumo_talhao['area_basal_ha']

    # Calcular CV de produtividade (apenas se colunas existirem)
    if 'vol_ha_std' in resumo_talhao.columns and 'vol_ha' in resumo_talhao.columns:
        resumo_talhao['cv_volume'] = (resumo_talhao['vol_ha_std'] / resumo_talhao['vol_ha']) * 100

    # Classifica√ß√£o dos talh√µes
    def classificar_talhao(row):
        vol_ha = row.get('vol_ha', 0)
        ima_vol = row.get('ima_vol', 0)

        if vol_ha >= 150 and ima_vol >= 25:
            return "Excelente"
        elif vol_ha >= 120 and ima_vol >= 20:
            return "Muito Bom"
        elif vol_ha >= 100 and ima_vol >= 15:
            return "Bom"
        elif vol_ha >= 80 and ima_vol >= 12:
            return "Regular"
        else:
            return "Baixo"

    resumo_talhao['classificacao_geral'] = resumo_talhao.apply(classificar_talhao, axis=1)

    return resumo_talhao


def calcular_estatisticas_gerais(resumo_parcelas, resumo_talhoes):
    """Calcula estat√≠sticas gerais detalhadas do invent√°rio"""
    stats = {
        'total_parcelas': len(resumo_parcelas),
        'total_talhoes': resumo_parcelas['talhao'].nunique(),
        'area_total_ha': resumo_talhoes['area_ha'].sum(),

        # M√©tricas de volume
        'vol_medio_ha': resumo_parcelas['vol_ha'].mean(),
        'vol_min_ha': resumo_parcelas['vol_ha'].min(),
        'vol_max_ha': resumo_parcelas['vol_ha'].max(),
        'cv_volume': (resumo_parcelas['vol_ha'].std() / resumo_parcelas['vol_ha'].mean()) * 100,
        'estoque_total_m3': resumo_talhoes['estoque_total_m3'].sum(),

        # M√©tricas volum√©tricas comerciais
        'vol_comercial_medio_ha': resumo_parcelas['vol_comercial_ha'].mean(),
        'estoque_comercial_total_m3': resumo_talhoes['estoque_comercial_m3'].sum(),

        # M√©tricas dendrom√©tricas
        'dap_medio': resumo_parcelas['dap_medio'].mean(),
        'dap_min': resumo_parcelas['dap_min'].min(),
        'dap_max': resumo_parcelas['dap_max'].max(),
        'altura_media': resumo_parcelas['altura_media'].mean(),
        'altura_min': resumo_parcelas['altura_min'].min(),
        'altura_max': resumo_parcelas['altura_max'].max(),

        # M√©tricas de crescimento
        'idade_media': resumo_parcelas['idade_anos'].mean(),
        'ima_vol_medio': resumo_parcelas['ima_vol'].mean(),
        'ima_area_basal_medio': resumo_parcelas['ima_area_basal'].mean(),
        'ima_biomassa_medio': resumo_parcelas['ima_biomassa'].mean(),

        # M√©tricas de densidade e estrutura
        'densidade_media_ha': resumo_parcelas['densidade_ha'].mean(),
        'area_basal_media_ha': resumo_parcelas['area_basal_ha'].mean(),
        'mortalidade_media': resumo_parcelas['mortalidade_estimada'].mean(),

        # M√©tricas ambientais
        'biomassa_total_ton': resumo_talhoes['biomassa_total_ton'].sum(),
        'carbono_estimado_ton': resumo_talhoes['biomassa_total_ton'].sum() * 0.47,  # 47% da biomassa √© carbono

        # √çndices de qualidade
        'indice_sitio_medio': resumo_parcelas['indice_sitio'].mean(),
        'arvores_por_parcela': resumo_parcelas['n_arvores'].mean()
    }

    # Classifica√ß√£o de produtividade
    q25 = resumo_parcelas['vol_ha'].quantile(0.25)
    q75 = resumo_parcelas['vol_ha'].quantile(0.75)

    stats['classe_alta'] = (resumo_parcelas['vol_ha'] >= q75).sum()
    stats['classe_media'] = ((resumo_parcelas['vol_ha'] >= q25) & (resumo_parcelas['vol_ha'] < q75)).sum()
    stats['classe_baixa'] = (resumo_parcelas['vol_ha'] < q25).sum()
    stats['q25_volume'] = q25
    stats['q75_volume'] = q75

    # Classifica√ß√£o de IMA
    ima_excelente = (resumo_parcelas['ima_vol'] >= 25).sum()
    ima_bom = ((resumo_parcelas['ima_vol'] >= 15) & (resumo_parcelas['ima_vol'] < 25)).sum()
    ima_regular = (resumo_parcelas['ima_vol'] < 15).sum()

    stats['ima_excelente'] = ima_excelente
    stats['ima_bom'] = ima_bom
    stats['ima_regular'] = ima_regular

    # Potencial de colheita (assumindo ciclo de 7 anos)
    anos_restantes = max(0, 7 - stats['idade_media'])
    volume_final_estimado = stats['vol_medio_ha'] + (stats['ima_vol_medio'] * anos_restantes)
    stats['volume_final_estimado_ha'] = volume_final_estimado
    stats['potencial_colheita_m3'] = stats['area_total_ha'] * volume_final_estimado

    return stats


def executar_inventario_completo(config_areas, parametros):
    """Executa o invent√°rio completo"""
    st.header("üöÄ Executando Invent√°rio Completo")

    # Barra de progresso
    progress_bar = st.progress(0)
    status_text = st.empty()

    try:
        status_text.text("Processando √°reas dos talh√µes...")
        progress_bar.progress(0.1)

        # Criar DataFrame de √°reas
        df_areas = criar_df_areas(config_areas)
        #st.success(f"‚úÖ √Åreas processadas: {len(df_areas)} talh√µes")

        status_text.text("Preparando dados do invent√°rio...")
        progress_bar.progress(0.2)

        # Obter modelos selecionados
        melhor_hip = st.session_state.resultados_hipsometricos['melhor_modelo']
        melhor_vol = st.session_state.resultados_volumetricos['melhor_modelo']

        # Filtrar dados do invent√°rio
        df_inventario = st.session_state.dados_inventario.copy()
        df_filtrado = df_inventario[
            (df_inventario['D_cm'].notna()) &
            (df_inventario['D_cm'] > 0) &
            (df_inventario['D_cm'] >= 4.0)
            ]

        # Adicionar √°reas aos dados
        df_com_areas = df_filtrado.merge(df_areas, on='talhao', how='left')
        df_com_areas['area_ha'] = df_com_areas['area_ha'].fillna(25.0)

        status_text.text("Aplicando modelos hipsom√©tricos...")
        progress_bar.progress(0.4)

        # Estimar alturas
        df_com_alturas = estimar_alturas_inventario(df_com_areas, melhor_hip)

        status_text.text("Aplicando modelos volum√©tricos...")
        progress_bar.progress(0.6)

        # Estimar volumes
        df_com_volumes = estimar_volumes_inventario(df_com_alturas, melhor_vol)

        status_text.text("Calculando m√©tricas adicionais...")
        progress_bar.progress(0.7)

        # Calcular m√©tricas adicionais
        df_completo = calcular_metricas_adicionais(df_com_volumes, parametros)

        status_text.text("Calculando estat√≠sticas finais...")
        progress_bar.progress(0.9)

        # Calcular resumos
        resumo_parcelas = calcular_resumo_por_parcela(df_completo, parametros)
        resumo_talhoes = calcular_resumo_por_talhao(resumo_parcelas)
        estatisticas_gerais = calcular_estatisticas_gerais(resumo_parcelas, resumo_talhoes)

        progress_bar.progress(1.0)
        status_text.text("‚úÖ Invent√°rio processado com sucesso!")

        # Preparar resultados finais
        resultados = {
            'inventario_completo': df_completo,
            'resumo_parcelas': resumo_parcelas,
            'resumo_talhoes': resumo_talhoes,
            'estatisticas_gerais': estatisticas_gerais,
            'modelos_utilizados': {
                'hipsometrico': melhor_hip,
                'volumetrico': melhor_vol
            },
            'parametros_utilizados': parametros
        }

        # Salvar no session_state
        st.session_state.inventario_processado = resultados

        #st.success(f"üèÜ Invent√°rio processado com sucesso!")
        #st.info(f"üìä Modelos utilizados: {melhor_hip} (Hipsom√©trico) + {melhor_vol} (Volum√©trico)")

        # Mostrar resultados
        mostrar_resultados_inventario(resultados)

    except Exception as e:
        st.error(f"‚ùå Erro no processamento do invent√°rio: {e}")
        st.info("üí° Verifique os dados e configura√ß√µes")
        with st.expander("üîç Detalhes do erro"):
            st.code(traceback.format_exc())


def mostrar_resultados_inventario(resultados):
    """Mostra os resultados finais do invent√°rio"""
    st.header("üìä Resultados Finais do Invent√°rio")

    stats = resultados['estatisticas_gerais']

    # M√©tricas principais melhoradas com tooltips
    st.subheader("üìà Indicadores Principais")

    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        st.metric("üå≤ Parcelas", f"{stats['total_parcelas']:,}".replace(',', '.'),
                  help="**Total de Parcelas** - N√∫mero de unidades amostrais medidas no invent√°rio florestal")
    with col2:
        st.metric("üìè √Årea Total", f"{formatar_brasileiro(stats['area_total_ha'], 1)} ha",
                  help="**√Årea Total** - Superf√≠cie total da floresta inventariada em hectares")
    with col3:
        st.metric("üìä Produtividade", f"{formatar_brasileiro(stats['vol_medio_ha'], 1)} m¬≥/ha",
                  help="**Volume por Hectare** - Volume m√©dio de madeira por unidade de √°rea")
    with col4:
        st.metric("üå≤ Estoque Total", formatar_numero_inteligente(stats['estoque_total_m3'], "m¬≥"),
                  help="**Estoque Total** - Volume total de madeira em toda a floresta (Produtividade √ó √Årea Total)")
    with col5:
        ima_col1, ima_col2 = st.columns([3, 1])
        with ima_col1:
            st.metric("üöÄ IMA M√©dio", f"{formatar_brasileiro(stats['ima_vol_medio'], 1)} m¬≥/ha/ano",
                      help="**Incremento M√©dio Anual** - Crescimento m√©dio anual em volume por hectare (Volume √∑ Idade)")
        with ima_col2:
            # Widget de ajuda para explicar o IMA
            with st.popover("‚ÑπÔ∏è"):
                st.markdown("""
                **üìà Incremento M√©dio Anual (IMA)**

                Medida usada para indicar o crescimento m√©dio anual em volume por hectare.

                **üßÆ F√≥rmula:**
                ```
                IMA = Volume (m¬≥/ha) √∑ Idade (anos)
                ```

                **üìä Interpreta√ß√£o (Eucalipto):**
                - **> 30 m¬≥/ha/ano**: Alta produtividade
                - **20-30 m¬≥/ha/ano**: M√©dia produtividade  
                - **< 20 m¬≥/ha/ano**: Baixa produtividade

                **üí° Uso Pr√°tico:**
                - Comparar diferentes talh√µes
                - Avaliar qualidade do s√≠tio
                - Planejar rota√ß√£o de corte
                - Calcular viabilidade econ√¥mica
                """, unsafe_allow_html=True)

    # Modelos utilizados
    st.subheader("üèÜ Modelos Utilizados")
    col1, col2 = st.columns(2)

    with col1:
        hip_r2 = st.session_state.resultados_hipsometricos.get('resultados', {}).get(
            resultados['modelos_utilizados']['hipsometrico'], {}).get('r2g', 0)
        st.success(
            f"üå≥ **Hipsom√©trico**: {resultados['modelos_utilizados']['hipsometrico']} (R¬≤ = {formatar_brasileiro(hip_r2, 3)})")
    with col2:
        vol_r2 = st.session_state.resultados_volumetricos.get('resultados', {}).get(
            resultados['modelos_utilizados']['volumetrico'], {}).get('r2', 0)
        st.success(
            f"üìä **Volum√©trico**: {resultados['modelos_utilizados']['volumetrico']} (R¬≤ = {formatar_brasileiro(vol_r2, 3)})")

    # Abas com resultados detalhados
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä Resumo Geral",
        "üå≥ Por Talh√£o",
        "üìà Crescimento & IMA",
        "üåø Estrutura & Densidade",
        "üìã Dados Completos",
        "üíæ Downloads"
    ])

    with tab1:
        mostrar_aba_resumo_geral(stats)

    with tab2:
        mostrar_aba_talhao(resultados)

    with tab3:
        mostrar_aba_crescimento_ima(stats, resultados)

    with tab4:
        mostrar_aba_estrutura_densidade(stats, resultados)

    with tab5:
        mostrar_aba_dados_completos(resultados)

    with tab6:
        mostrar_aba_downloads(resultados)


def mostrar_aba_resumo_geral(stats):
    """Mostra aba com resumo geral melhorado"""

    # M√©tricas dendrom√©tricas
    st.subheader("üìä Caracter√≠sticas Dendrom√©tricas")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìè DAP M√©dio", f"{formatar_brasileiro(stats['dap_medio'], 1)} cm",
                  help="**Di√¢metro √† Altura do Peito** - Di√¢metro m√©dio do tronco medido a 1,30m do solo")
        st.caption(
            f"Amplitude: {formatar_brasileiro(stats['dap_min'], 1)} - {formatar_brasileiro(stats['dap_max'], 1)} cm")

    with col2:
        st.metric("üå≥ Altura M√©dia", f"{formatar_brasileiro(stats['altura_media'], 1)} m",
                  help="**Altura Total** - Altura m√©dia das √°rvores do solo at√© o topo da copa")
        st.caption(
            f"Amplitude: {formatar_brasileiro(stats['altura_min'], 1)} - {formatar_brasileiro(stats['altura_max'], 1)} m")

    with col3:
        st.metric("üìä CV Volume", f"{formatar_brasileiro(stats['cv_volume'], 1)}%",
                  help="**Coeficiente de Varia√ß√£o** - Medida da variabilidade dos volumes entre parcelas (Desvio Padr√£o/M√©dia √ó 100)")
        cv_qualif = "Baixo" if stats['cv_volume'] < 20 else "M√©dio" if stats['cv_volume'] < 40 else "Alto"
        st.caption(f"Variabilidade: {cv_qualif}")

    with col4:
        st.metric("üìÖ Idade M√©dia", f"{formatar_brasileiro(stats['idade_media'], 1)} anos",
                  help="**Idade do Povoamento** - Tempo decorrido desde o plantio at√© a data da medi√ß√£o")

    # Classifica√ß√£o de produtividade
    st.subheader("üìä Classifica√ß√£o de Produtividade")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "üå≤üå≤üå≤ Classe Alta",
            f"{stats['classe_alta']} parcelas",
            help=f"**Parcelas de Alta Produtividade** - Parcelas com volume ‚â• {formatar_brasileiro(stats['q75_volume'], 1)} m¬≥/ha (75¬∫ percentil)"
        )

    with col2:
        st.metric(
            "üå≤üå≤ Classe M√©dia",
            f"{stats['classe_media']} parcelas",
            help=f"**Parcelas de Produtividade M√©dia** - Parcelas com volume entre {formatar_brasileiro(stats['q25_volume'], 1)} e {formatar_brasileiro(stats['q75_volume'], 1)} m¬≥/ha"
        )

    with col3:
        st.metric(
            "üå≤ Classe Baixa",
            f"{stats['classe_baixa']} parcelas",
            help=f"**Parcelas de Baixa Produtividade** - Parcelas com volume < {formatar_brasileiro(stats['q25_volume'], 1)} m¬≥/ha (25¬∫ percentil)"
        )

    # M√©tricas comerciais e ambientais
    st.subheader("üí∞ Potencial Comercial & Ambiental")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üì¶ Volume Comercial", f"{formatar_brasileiro(stats['vol_comercial_medio_ha'], 1)} m¬≥/ha",
                  help="**Volume Comercial** - Volume de madeira aproveit√°vel comercialmente (‚âà85% do volume total)")
        st.metric("üì¶ Estoque Comercial", formatar_numero_inteligente(stats['estoque_comercial_total_m3'], "m¬≥"),
                  help="**Estoque Comercial Total** - Volume comercial total de toda a √°rea (Volume Comercial √ó √Årea Total)")

    with col2:
        st.metric("üåø Biomassa Total", formatar_numero_inteligente(stats['biomassa_total_ton'], "ton"),
                  help="**Biomassa Seca** - Peso da madeira seca total considerando densidade e fator de forma")
        st.metric("üå± Carbono Estocado", formatar_numero_inteligente(stats['carbono_estimado_ton'], "ton CO‚ÇÇ"),
                  help="**Carbono Sequestrado** - Quantidade de CO‚ÇÇ retirado da atmosfera e estocado na madeira (‚âà47% da biomassa)")

    with col3:
        st.metric("üèóÔ∏è √Årea Basal M√©dia", f"{formatar_brasileiro(stats['area_basal_media_ha'], 1)} m¬≤/ha",
                  help="**√Årea Basal** - Soma das √°reas seccionais de todas as √°rvores por hectare (indica ocupa√ß√£o do terreno)")
        st.metric("üå≤ Densidade M√©dia", f"{formatar_brasileiro(stats['densidade_media_ha'], 0)} √°rv/ha",
                  help="**Densidade Atual** - N√∫mero de √°rvores vivas por hectare")

    with col4:
        st.metric("üìà Mortalidade", f"{formatar_brasileiro(stats['mortalidade_media'], 1)}%",
                  help="**Taxa de Mortalidade** - Percentual de √°rvores mortas desde o plantio")
        st.metric("üéØ √çndice de S√≠tio", f"{formatar_brasileiro(stats['indice_sitio_medio'], 2)}",
                  help="**Qualidade do S√≠tio** - Capacidade produtiva do local (Altura Dominante/Idade)")

    # Proje√ß√µes futuras
    st.subheader("üîÆ Proje√ß√µes de Colheita")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("üìä Volume Final Estimado", f"{formatar_brasileiro(stats['volume_final_estimado_ha'], 1)} m¬≥/ha",
                  help="**Volume na Colheita** - Volume estimado ao final do ciclo de rota√ß√£o (7 anos para eucalipto)")
    with col2:
        st.metric("üå≤ Potencial de Colheita", formatar_numero_inteligente(stats['potencial_colheita_m3'], "m¬≥"),
                  help="**Potencial Total de Colheita** - Volume total estimado para colheita em toda a √°rea")
    with col3:
        ciclo_otimo = 7  # Assumindo ciclo t√≠pico de eucalipto
        anos_restantes = max(0, ciclo_otimo - stats['idade_media'])
        st.metric("‚è∞ Anos at√© Colheita", f"{formatar_brasileiro(anos_restantes, 1)} anos",
                  help="**Tempo para Colheita** - Anos restantes at√© atingir a idade √≥tima de corte (7 anos)")


def mostrar_aba_talhao(resultados):
    """Mostra aba com an√°lise detalhada por talh√£o"""
    st.subheader("üå≥ An√°lise Detalhada por Talh√£o")

    resumo_talhao = resultados['resumo_talhoes']

    # Verificar colunas dispon√≠veis e selecionar as que existem
    colunas_base = ['talhao', 'area_ha', 'n_parcelas']
    colunas_opcionais = {
        'vol_ha': 'Volume (m¬≥/ha)',
        'vol_medio_ha': 'Volume (m¬≥/ha)',
        'ima_vol': 'IMA (m¬≥/ha/ano)',
        'ima_vol_medio': 'IMA (m¬≥/ha/ano)',
        'dap_medio': 'DAP (cm)',
        'altura_media': 'Altura (m)',
        'densidade_ha': 'Densidade (√°rv/ha)',
        'densidade_media_ha': 'Densidade (√°rv/ha)',
        'mortalidade_estimada': 'Mortalidade (%)',
        'mortalidade_media': 'Mortalidade (%)',
        'estoque_total_m3': 'Estoque (m¬≥)',
        'classificacao_geral': 'Classifica√ß√£o'
    }

    # Montar lista de colunas para exibi√ß√£o
    colunas_exibir = colunas_base.copy()
    nomes_colunas = ['Talh√£o', '√Årea (ha)', 'Parcelas']

    for col_original, nome_display in colunas_opcionais.items():
        if col_original in resumo_talhao.columns:
            colunas_exibir.append(col_original)
            nomes_colunas.append(nome_display)
            break  # Usar apenas a primeira vers√£o encontrada para cada m√©trica

    # Preparar dados para exibi√ß√£o com formata√ß√£o brasileira
    df_display = resumo_talhao[colunas_exibir].copy()
    df_display.columns = nomes_colunas

    # Formatar n√∫meros usando a fun√ß√£o brasileira
    colunas_numericas = [col for col in df_display.columns if col not in ['Talh√£o', 'Classifica√ß√£o']]
    if colunas_numericas:
        df_display = formatar_dataframe_brasileiro(df_display, colunas_numericas, decimais=1)

    # Colorir classifica√ß√£o se existir
    if 'Classifica√ß√£o' in df_display.columns:
        def colorir_classificacao(val):
            colors = {
                'Excelente': 'background-color: #90EE90',
                'Muito Bom': 'background-color: #87CEEB',
                'Bom': 'background-color: #98FB98',
                'Regular': 'background-color: #F0E68C',
                'Baixo': 'background-color: #FFA07A'
            }
            return colors.get(val, '')

        styled_df = df_display.style.applymap(colorir_classificacao, subset=['Classifica√ß√£o'])
        st.dataframe(styled_df, hide_index=True, use_container_width=True)
    else:
        st.dataframe(df_display, hide_index=True, use_container_width=True)

    # Destaques por talh√£o (apenas se colunas existirem)
    st.subheader("üèÜ Destaques por Talh√£o")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        # Talh√£o mais produtivo
        col_volume = None
        for col in ['vol_ha', 'vol_medio_ha']:
            if col in resumo_talhao.columns:
                col_volume = col
                break

        if col_volume:
            idx_max_vol = resumo_talhao[col_volume].idxmax()
            talhao_max_vol = resumo_talhao.loc[idx_max_vol, 'talhao']
            vol_max = resumo_talhao.loc[idx_max_vol, col_volume]
            st.metric("ü•á Mais Produtivo", f"Talh√£o {talhao_max_vol}", f"{formatar_brasileiro(vol_max, 1)} m¬≥/ha")
        else:
            st.info("Volume n√£o dispon√≠vel")

    with col2:
        # Maior IMA
        col_ima = None
        for col in ['ima_vol', 'ima_vol_medio']:
            if col in resumo_talhao.columns:
                col_ima = col
                break

        if col_ima:
            idx_max_ima = resumo_talhao[col_ima].idxmax()
            talhao_max_ima = resumo_talhao.loc[idx_max_ima, 'talhao']
            ima_max = resumo_talhao.loc[idx_max_ima, col_ima]
            st.metric("üöÄ Maior IMA", f"Talh√£o {talhao_max_ima}", f"{formatar_brasileiro(ima_max, 1)} m¬≥/ha/ano")
        else:
            st.info("IMA n√£o dispon√≠vel")

    with col3:
        # Maior √°rea
        if 'area_ha' in resumo_talhao.columns:
            idx_max_area = resumo_talhao['area_ha'].idxmax()
            talhao_max_area = resumo_talhao.loc[idx_max_area, 'talhao']
            area_max = resumo_talhao.loc[idx_max_area, 'area_ha']
            st.metric("üìè Maior √Årea", f"Talh√£o {talhao_max_area}", f"{formatar_brasileiro(area_max, 1)} ha")
        else:
            st.info("√Årea n√£o dispon√≠vel")

    with col4:
        # Maior estoque
        if 'estoque_total_m3' in resumo_talhao.columns:
            idx_max_estoque = resumo_talhao['estoque_total_m3'].idxmax()
            talhao_max_estoque = resumo_talhao.loc[idx_max_estoque, 'talhao']
            estoque_max = resumo_talhao.loc[idx_max_estoque, 'estoque_total_m3']
            st.metric("üå≤ Maior Estoque", f"Talh√£o {talhao_max_estoque}", formatar_numero_inteligente(estoque_max, "m¬≥"))
        else:
            st.info("Estoque n√£o dispon√≠vel")


def mostrar_aba_crescimento_ima(stats, resultados):
    """Mostra aba focada em crescimento e IMA"""
    st.subheader("üìà An√°lise de Crescimento e IMA")

    # Classifica√ß√£o de IMA
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("üåü IMA Excelente", f"{stats['ima_excelente']} parcelas",
                  help="**IMA Excelente** - Parcelas com Incremento M√©dio Anual ‚â• 25 m¬≥/ha/ano (alta produtividade)")
    with col2:
        st.metric("üìä IMA Bom", f"{stats['ima_bom']} parcelas",
                  help="**IMA Bom** - Parcelas com IMA entre 15-25 m¬≥/ha/ano (produtividade m√©dia-alta)")
    with col3:
        st.metric("üìâ IMA Regular", f"{stats['ima_regular']} parcelas",
                  help="**IMA Regular** - Parcelas com IMA < 15 m¬≥/ha/ano (produtividade baixa)")

    # Gr√°ficos de crescimento
    st.subheader("üìä Gr√°ficos de Crescimento")

    resumo_parcelas = resultados['resumo_parcelas']

    col1, col2 = st.columns(2)

    with col1:
        # Distribui√ß√£o de IMA
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.hist(resumo_parcelas['ima_vol'], bins=15, alpha=0.7, color='green', edgecolor='black')
        ax.axvline(stats['ima_vol_medio'], color='red', linestyle='--', linewidth=2,
                   label=f'M√©dia: {formatar_brasileiro(stats["ima_vol_medio"], 1)} m¬≥/ha/ano')
        ax.set_xlabel('IMA (m¬≥/ha/ano)')
        ax.set_ylabel('Frequ√™ncia')
        ax.set_title('Distribui√ß√£o do IMA')
        ax.legend()
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
        plt.close()

    with col2:
        # Rela√ß√£o Volume vs IMA
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.scatter(resumo_parcelas['vol_ha'], resumo_parcelas['ima_vol'], alpha=0.6, color='darkgreen')
        ax.set_xlabel('Volume (m¬≥/ha)')
        ax.set_ylabel('IMA (m¬≥/ha/ano)')
        ax.set_title('Rela√ß√£o Volume vs IMA')
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
        plt.close()

    # M√©tricas de crescimento por componente
    st.subheader("üå± Crescimento por Componente")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("üìä IMA Volume", f"{formatar_brasileiro(stats['ima_vol_medio'], 2)} m¬≥/ha/ano",
                  help="**Incremento M√©dio Anual Volum√©trico** - Crescimento m√©dio anual em volume por hectare")
        st.metric("üìà IMA √Årea Basal", f"{formatar_brasileiro(stats['ima_area_basal_medio'], 2)} m¬≤/ha/ano",
                  help="**IMA de √Årea Basal** - Crescimento m√©dio anual da √°rea basal por hectare")

    with col2:
        st.metric("üåø IMA Biomassa", f"{formatar_numero_inteligente(stats['ima_biomassa_medio'], 'kg/ha/ano')}",
                  help="**IMA de Biomassa** - Crescimento m√©dio anual da biomassa seca por hectare")
        st.metric("üéØ √çndice de S√≠tio", f"{formatar_brasileiro(stats['indice_sitio_medio'], 2)}",
                  help="**√çndice de S√≠tio** - Indicador da qualidade do local para crescimento florestal (altura/idade)")

    with col3:
        # Proje√ß√£o de crescimento
        crescimento_anual = stats['ima_vol_medio']
        volume_5_anos = stats['vol_medio_ha'] + (crescimento_anual * 2)  # +2 anos
        st.metric("üìä Volume em 2 anos", f"{formatar_brasileiro(volume_5_anos, 1)} m¬≥/ha",
                  help="**Proje√ß√£o de Volume** - Volume estimado daqui a 2 anos baseado no IMA atual")
        st.caption("Proje√ß√£o baseada no IMA atual")


def mostrar_aba_estrutura_densidade(stats, resultados):
    """Mostra aba com an√°lise de estrutura e densidade"""
    st.subheader("üåø Estrutura do Povoamento e Densidade")

    # M√©tricas de densidade
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üå≤ Densidade Atual", f"{formatar_brasileiro(stats['densidade_media_ha'], 0)} √°rv/ha",
                  help="**Densidade Atual** - N√∫mero de √°rvores vivas por hectare no momento da medi√ß√£o")
    with col2:
        densidade_inicial = resultados['parametros_utilizados'].get('densidade_plantio', 1667)
        st.metric("üå± Densidade Inicial", f"{formatar_brasileiro(densidade_inicial, 0)} √°rv/ha",
                  help="**Densidade de Plantio** - N√∫mero de mudas plantadas inicialmente por hectare")
    with col3:
        st.metric("üìâ Mortalidade", f"{formatar_brasileiro(stats['mortalidade_media'], 1)}%",
                  help="**Taxa de Mortalidade** - Percentual de √°rvores que morreram desde o plantio")
    with col4:
        sobrevivencia = 100 - stats['mortalidade_media']
        st.metric("‚úÖ Sobreviv√™ncia", f"{formatar_brasileiro(sobrevivencia, 1)}%",
                  help="**Taxa de Sobreviv√™ncia** - Percentual de √°rvores que permaneceram vivas desde o plantio")

        #st.metric("‚úÖ Sobreviv√™ncia", f"{sobrevivencia:.1f}%")

    # Distribui√ß√£o diam√©trica
    df_completo = resultados['inventario_completo']
    if 'classe_dap' in df_completo.columns:
        st.subheader("üìä Distribui√ß√£o Diam√©trica")

        dist_dap = df_completo['classe_dap'].value_counts().sort_index()

        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de barras da distribui√ß√£o
            fig, ax = plt.subplots(figsize=(8, 6))
            bars = ax.bar(range(len(dist_dap)), dist_dap.values, color='brown', alpha=0.7)
            ax.set_xlabel('Classe Diam√©trica')
            ax.set_ylabel('N√∫mero de √Årvores')
            ax.set_title('Distribui√ß√£o Diam√©trica')
            ax.set_xticks(range(len(dist_dap)))
            ax.set_xticklabels(dist_dap.index, rotation=45)
            ax.grid(True, alpha=0.3)

            # Adicionar valores nas barras com formata√ß√£o brasileira
            for bar, val in zip(bars, dist_dap.values):
                ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + max(dist_dap.values) * 0.01,
                        f'{val}', ha='center', va='bottom')

            plt.tight_layout()
            st.pyplot(fig)
            plt.close()

        with col2:
            # Tabela da distribui√ß√£o com formata√ß√£o brasileira
            st.write("**Distribui√ß√£o por Classe:**")
            df_dist = pd.DataFrame({
                'Classe': dist_dap.index,
                '√Årvores': dist_dap.values,
                'Percentual': (dist_dap.values / dist_dap.values.sum() * 100).round(1)
            })
            # Formatar a coluna de percentual
            df_dist['Percentual'] = df_dist['Percentual'].apply(lambda x: f"{formatar_brasileiro(x, 1)}%")
            st.dataframe(df_dist, hide_index=True)

    # An√°lise de biomassa e carbono
    st.subheader("üåø An√°lise Ambiental")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("üåø Biomassa Total", formatar_numero_inteligente(stats['biomassa_total_ton'], "ton"),
                  help="**Biomassa Seca Total** - Peso total da madeira seca de toda a floresta")
        st.metric("üå± Biomassa por Hectare",
                  f"{formatar_brasileiro(stats['biomassa_total_ton'] / stats['area_total_ha'], 1)} ton/ha",
                  help="**Biomassa por Hectare** - Peso m√©dio da madeira seca por unidade de √°rea")

    with col2:
        st.metric("üå± Carbono Estocado", formatar_numero_inteligente(stats['carbono_estimado_ton'], "ton CO‚ÇÇ"),
                  help="**Carbono Sequestrado** - CO‚ÇÇ retirado da atmosfera e fixado na madeira (‚âà47% da biomassa)")
        carbono_ha = stats['carbono_estimado_ton'] / stats['area_total_ha']
        st.metric("üå± Carbono por Hectare", f"{formatar_brasileiro(carbono_ha, 1)} ton CO‚ÇÇ/ha",
                  help="**Sequestro de Carbono por Hectare** - Quantidade de CO‚ÇÇ sequestrado por unidade de √°rea")

    with col3:
        # Equivalente em carros retirados de circula√ß√£o (assumindo 4.6 ton CO‚ÇÇ/ano por carro)
        carros_equivalente = stats['carbono_estimado_ton'] / 4.6
        st.metric("üöó Equivalente em Carros", f"{formatar_numero_inteligente(carros_equivalente, 'carros/ano')}",
                  help="**Impacto Ambiental** - N√∫mero de carros que precisariam ser retirados de circula√ß√£o por 1 ano para ter o mesmo efeito ambiental")
        st.caption("Emiss√£o m√©dia anual por ve√≠culo")


def mostrar_aba_dados_completos(resultados):
    """Mostra aba com dados completos"""
    st.subheader("üìã Dados Completos")

    # Seletor de dataset
    datasets = {
        "Resumo por Parcela": resultados['resumo_parcelas'],
        "Resumo por Talh√£o": resultados['resumo_talhoes'],
        "Invent√°rio Completo": resultados['inventario_completo'].head(1000)
    }

    dataset_selecionado = st.selectbox(
        "üìä Selecione o dataset:",
        options=list(datasets.keys()),
        key="dataset_selector_completo"
    )

    df_selecionado = datasets[dataset_selecionado]

    # Informa√ß√µes do dataset
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Registros", len(df_selecionado))
    with col2:
        st.metric("Colunas", len(df_selecionado.columns))
    with col3:
        if dataset_selecionado == "Invent√°rio Completo" and len(resultados['inventario_completo']) > 1000:
            st.metric("Exibindo", "Primeiros 1.000")
        else:
            st.metric("Exibindo", "Todos")

    # Exibir dados
    st.dataframe(df_selecionado, hide_index=True, use_container_width=True)


def mostrar_aba_downloads(resultados):
    """Mostra aba com downloads melhorados"""
    st.subheader("üíæ Downloads")

    # Se√ß√£o de dados
    st.write("**üìÅ Arquivos de Dados:**")
    col1, col2, col3 = st.columns(3)

    with col1:
        csv_parcelas = resultados['resumo_parcelas'].to_csv(index=False)
        st.download_button(
            label="üìä Resumo por Parcela",
            data=csv_parcelas,
            file_name="resumo_parcelas_detalhado.csv",
            mime="text/csv",
            key="download_parcelas_detalhado"
        )

    with col2:
        csv_talhoes = resultados['resumo_talhoes'].to_csv(index=False)
        st.download_button(
            label="üå≥ Resumo por Talh√£o",
            data=csv_talhoes,
            file_name="resumo_talhoes_detalhado.csv",
            mime="text/csv",
            key="download_talhoes_detalhado"
        )

    with col3:
        csv_completo = resultados['inventario_completo'].to_csv(index=False)
        st.download_button(
            label="üìã Invent√°rio Completo",
            data=csv_completo,
            file_name="inventario_completo_detalhado.csv",
            mime="text/csv",
            key="download_completo_detalhado"
        )

    # Relat√≥rio executivo melhorado
    st.write("**üìÑ Relat√≥rios:**")
    relatorio = gerar_relatorio_executivo_melhorado(resultados)

    col1, col2 = st.columns(2)
    with col1:
        st.download_button(
            label="üìÑ Relat√≥rio Executivo Completo",
            data=relatorio,
            file_name="relatorio_inventario_completo.md",
            mime="text/markdown",
            key="download_relatorio_completo"
        )

    with col2:
        # Relat√≥rio resumido para gest√£o
        relatorio_gestao = gerar_relatorio_gestao(resultados)
        st.download_button(
            label="üìã Relat√≥rio Gerencial",
            data=relatorio_gestao,
            file_name="relatorio_gerencial.md",
            mime="text/markdown",
            key="download_relatorio_gestao"
        )


def gerar_relatorio_executivo_melhorado(resultados):
    """Gera relat√≥rio executivo completo melhorado com formata√ß√£o brasileira"""
    stats = resultados['estatisticas_gerais']
    modelos = resultados['modelos_utilizados']

    relatorio = f"""# RELAT√ìRIO EXECUTIVO - INVENT√ÅRIO FLORESTAL COMPLETO

## üèÜ MODELOS SELECIONADOS
- **Hipsom√©trico**: {modelos['hipsometrico']}
- **Volum√©trico**: {modelos['volumetrico']}

## üå≤ RESUMO EXECUTIVO
- **Parcelas avaliadas**: {stats['total_parcelas']}
- **Talh√µes**: {stats['total_talhoes']}
- **√Årea total**: {formatar_brasileiro(stats['area_total_ha'], 1)} ha
- **Estoque total**: {formatar_numero_inteligente(stats['estoque_total_m3'], 'm¬≥')}
- **Estoque comercial**: {formatar_numero_inteligente(stats['estoque_comercial_total_m3'], 'm¬≥')}
- **Produtividade m√©dia**: {formatar_brasileiro(stats['vol_medio_ha'], 1)} m¬≥/ha
- **IMA m√©dio**: {formatar_brasileiro(stats['ima_vol_medio'], 1)} m¬≥/ha/ano

## üìä CARACTER√çSTICAS DENDROM√âTRICAS
- **DAP m√©dio**: {formatar_brasileiro(stats['dap_medio'], 1)} cm (amplitude: {formatar_brasileiro(stats['dap_min'], 1)} - {formatar_brasileiro(stats['dap_max'], 1)} cm)
- **Altura m√©dia**: {formatar_brasileiro(stats['altura_media'], 1)} m (amplitude: {formatar_brasileiro(stats['altura_min'], 1)} - {formatar_brasileiro(stats['altura_max'], 1)} m)
- **Densidade m√©dia**: {formatar_brasileiro(stats['densidade_media_ha'], 0)} √°rv/ha
- **√Årea basal m√©dia**: {formatar_brasileiro(stats['area_basal_media_ha'], 1)} m¬≤/ha
- **Idade m√©dia**: {formatar_brasileiro(stats['idade_media'], 1)} anos

## üìà AN√ÅLISE DE CRESCIMENTO
- **IMA Volume**: {formatar_brasileiro(stats['ima_vol_medio'], 2)} m¬≥/ha/ano
- **IMA √Årea Basal**: {formatar_brasileiro(stats['ima_area_basal_medio'], 2)} m¬≤/ha/ano
- **IMA Biomassa**: {formatar_brasileiro(stats['ima_biomassa_medio'], 0)} kg/ha/ano
- **√çndice de S√≠tio**: {formatar_brasileiro(stats['indice_sitio_medio'], 2)}

## üåø ASPECTOS AMBIENTAIS
- **Biomassa total**: {formatar_numero_inteligente(stats['biomassa_total_ton'], 'toneladas')}
- **Carbono estocado**: {formatar_numero_inteligente(stats['carbono_estimado_ton'], 'toneladas CO‚ÇÇ')}
- **Mortalidade m√©dia**: {formatar_brasileiro(stats['mortalidade_media'], 1)}%

## üìä CLASSIFICA√á√ÉO DE PRODUTIVIDADE
- **Classe Alta** (‚â• {formatar_brasileiro(stats['q75_volume'], 1)} m¬≥/ha): {stats['classe_alta']} parcelas
- **Classe M√©dia** ({formatar_brasileiro(stats['q25_volume'], 1)} - {formatar_brasileiro(stats['q75_volume'], 1)} m¬≥/ha): {stats['classe_media']} parcelas
- **Classe Baixa** (< {formatar_brasileiro(stats['q25_volume'], 1)} m¬≥/ha): {stats['classe_baixa']} parcelas

## üìà CLASSIFICA√á√ÉO DE IMA
- **IMA Excelente** (‚â• 25 m¬≥/ha/ano): {stats['ima_excelente']} parcelas
- **IMA Bom** (15-25 m¬≥/ha/ano): {stats['ima_bom']} parcelas
- **IMA Regular** (< 15 m¬≥/ha/ano): {stats['ima_regular']} parcelas

## üîÆ PROJE√á√ïES DE COLHEITA
- **Volume final estimado**: {formatar_brasileiro(stats['volume_final_estimado_ha'], 1)} m¬≥/ha
- **Potencial de colheita**: {formatar_numero_inteligente(stats['potencial_colheita_m3'], 'm¬≥')}
- **Anos at√© colheita √≥tima**: {formatar_brasileiro(max(0, 7 - stats['idade_media']), 1)} anos

## üìà VARIABILIDADE
- **CV produtividade**: {formatar_brasileiro(stats['cv_volume'], 1)}%
- **Amplitude volume**: {formatar_brasileiro(stats['vol_min_ha'], 1)} - {formatar_brasileiro(stats['vol_max_ha'], 1)} m¬≥/ha

## üí∞ ASPECTOS COMERCIAIS
- **Volume comercial m√©dio**: {formatar_brasileiro(stats['vol_comercial_medio_ha'], 1)} m¬≥/ha
- **Estoque comercial total**: {formatar_numero_inteligente(stats['estoque_comercial_total_m3'], 'm¬≥')}
- **Percentual comercial**: {formatar_brasileiro((stats['vol_comercial_medio_ha'] / stats['vol_medio_ha'] * 100), 1)}%

## üéØ RECOMENDA√á√ïES T√âCNICAS
1. **Manejo**: Foco nos talh√µes de classe alta para maximizar produtividade
2. **Colheita**: Planejamento baseado no IMA e ciclo √≥timo de 7 anos
3. **Silvicultura**: Aten√ß√£o especial aos talh√µes com alta mortalidade
4. **Monitoramento**: Acompanhar evolu√ß√£o do IMA nas pr√≥ximas medi√ß√µes

---
*Relat√≥rio gerado pelo Sistema Integrado de Invent√°rio Florestal*
*Data: {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}*
"""

    return relatorio


def gerar_relatorio_gestao(resultados):
    """Gera relat√≥rio resumido para gest√£o"""
    stats = resultados['estatisticas_gerais']
    resumo_talhoes = resultados['resumo_talhoes']

    # Encontrar melhores e piores talh√µes (verificar se colunas existem)
    col_volume = None
    for col in ['vol_ha', 'vol_medio_ha']:
        if col in resumo_talhoes.columns:
            col_volume = col
            break

    col_ima = None
    for col in ['ima_vol', 'ima_vol_medio']:
        if col in resumo_talhoes.columns:
            col_ima = col
            break

    if col_volume and len(resumo_talhoes) > 0:
        melhor_talhao = resumo_talhoes.loc[resumo_talhoes[col_volume].idxmax()]
        pior_talhao = resumo_talhoes.loc[resumo_talhoes[col_volume].idxmin()]

        melhor_vol = melhor_talhao[col_volume]
        pior_vol = pior_talhao[col_volume]
        melhor_ima = melhor_talhao.get(col_ima, 0) if col_ima else 0
        pior_ima = pior_talhao.get(col_ima, 0) if col_ima else 0
    else:
        # Valores padr√£o se n√£o houver dados
        melhor_talhao = {'talhao': 'N/A'}
        pior_talhao = {'talhao': 'N/A'}
        melhor_vol = pior_vol = melhor_ima = pior_ima = 0

    relatorio = f"""# RELAT√ìRIO GERENCIAL - INVENT√ÅRIO FLORESTAL

## üìä RESUMO EXECUTIVO
**Situa√ß√£o Atual do Patrim√¥nio Florestal**

### üéØ Indicadores Chave
- **√Årea Total**: {formatar_brasileiro(stats.get('area_total_ha', 0), 1)} hectares
- **Estoque Total**: {formatar_numero_inteligente(stats.get('estoque_total_m3', 0), 'm¬≥')}
- **Valor M√©dio**: {formatar_brasileiro(stats.get('vol_medio_ha', 0), 1)} m¬≥/ha
- **Produtividade**: {formatar_brasileiro(stats.get('ima_vol_medio', 0), 1)} m¬≥/ha/ano
- **Idade M√©dia**: {formatar_brasileiro(stats.get('idade_media', 0), 1)} anos

### üìà PERFORMANCE POR TALH√ÉO

**üèÜ Melhor Performance:**
- Talh√£o {melhor_talhao['talhao']}: {formatar_brasileiro(melhor_vol, 1)} m¬≥/ha (IMA: {formatar_brasileiro(melhor_ima, 1)})

**‚ö†Ô∏è Requer Aten√ß√£o:**
- Talh√£o {pior_talhao['talhao']}: {formatar_brasileiro(pior_vol, 1)} m¬≥/ha (IMA: {formatar_brasileiro(pior_ima, 1)})

### üí∞ POTENCIAL ECON√îMICO
- **Volume Comercial**: {formatar_numero_inteligente(stats.get('estoque_comercial_total_m3', 0), 'm¬≥')}
- **Biomassa para Energia**: {formatar_numero_inteligente(stats.get('biomassa_total_ton', 0), 'toneladas')}
- **Cr√©ditos de Carbono**: {formatar_numero_inteligente(stats.get('carbono_estimado_ton', 0), 'ton CO‚ÇÇ')}

### üéØ A√á√ïES RECOMENDADAS

**Imediatas (0-6 meses):**
1. Intensificar manejo nos talh√µes de alta produtividade
2. Investigar causas da baixa performance em talh√µes cr√≠ticos
3. Planejar colheita para talh√µes pr√≥ximos ao ciclo √≥timo

**M√©dio Prazo (6-18 meses):**
1. Reforma/replantio em √°reas de baixa produtividade
2. Otimiza√ß√£o do espa√ßamento para melhorar IMA
3. Implementa√ß√£o de pr√°ticas de manejo diferenciado

**Longo Prazo (2+ anos):**
1. Melhoramento gen√©tico baseado nos melhores materiais
2. Expans√£o para √°reas com potencial similar aos melhores talh√µes
3. Certifica√ß√£o florestal para agregar valor

### üìä CLASSIFICA√á√ÉO GERAL
- **{formatar_brasileiro(((stats.get('classe_alta', 0) / stats.get('total_parcelas', 1)) * 100), 1)}%** das parcelas em classe ALTA
- **{formatar_brasileiro(((stats.get('classe_media', 0) / stats.get('total_parcelas', 1)) * 100), 1)}%** das parcelas em classe M√âDIA  
- **{formatar_brasileiro(((stats.get('classe_baixa', 0) / stats.get('total_parcelas', 1)) * 100), 1)}%** das parcelas em classe BAIXA

---
**Pr√≥xima avalia√ß√£o recomendada**: {(pd.Timestamp.now() + pd.DateOffset(years=1)).strftime('%m/%Y')}
"""

    return relatorio


def main():
    if not verificar_prerequisitos():
        return

    st.title("üìà Invent√°rio Florestal")
    st.markdown("### Processamento Completo e Relat√≥rios Finais")

    # Mostrar status das etapas anteriores
    mostrar_status_etapas()

    # Verificar se j√° foi processado
    if st.session_state.get('inventario_processado'):
        st.info("‚ÑπÔ∏è O invent√°rio j√° foi processado. Resultados salvos abaixo.")

        # Bot√£o para reprocessar
        if st.button("üîÑ Reprocessar Invent√°rio", key="btn_reprocessar_inv"):
            del st.session_state.inventario_processado
            st.rerun()

        # Mostrar resultados salvos
        mostrar_resultados_inventario(st.session_state.inventario_processado)
        return

    # Configurar √°reas dos talh√µes
    config_areas = configurar_areas_talhoes()

    # Configurar par√¢metros avan√ßados
    parametros = configurar_parametros_avancados()

    # Resumo dos dados de entrada
    st.subheader("üìã Resumo dos Dados de Entrada")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Registros", len(st.session_state.dados_inventario))
    with col2:
        st.metric("Talh√µes", st.session_state.dados_inventario['talhao'].nunique())
    with col3:
        st.metric("Parcelas", st.session_state.dados_inventario['parcela'].nunique())
    with col4:
        cubagem_len = 0
        if hasattr(st.session_state, 'dados_cubagem') and st.session_state.dados_cubagem is not None:
            cubagem_len = len(st.session_state.dados_cubagem)
        st.metric("√Årvores Cubadas", cubagem_len)

    # Preview das configura√ß√µes
    with st.expander("üëÄ Preview das Configura√ß√µes"):
        col1, col2 = st.columns(2)

        with col1:
            st.write("**üìè Configura√ß√µes de √Årea:**")
            st.write(f"- M√©todo: {config_areas['metodo']}")
            if config_areas['metodo'] == "√Årea fixa para todos":
                st.write(f"- √Årea por talh√£o: {config_areas['area_fixa']:.1f} ha")
            elif config_areas['metodo'] == "Simula√ß√£o baseada em parcelas":
                st.write(f"- Fator de expans√£o: {config_areas.get('fator_expansao', 3.0):.1f} ha/parcela")

        with col2:
            st.write("**‚öôÔ∏è Par√¢metros Florestais:**")
            st.write(f"- √Årea da parcela: {parametros['area_parcela']} m¬≤")
            st.write(f"- Densidade de plantio: {parametros['densidade_plantio']} √°rv/ha")
            st.write(f"- Taxa de sobreviv√™ncia: {parametros['sobrevivencia'] * 100:.0f}%")
            st.write(f"- Densidade da madeira: {parametros['densidade_madeira']} kg/m¬≥")

    # Bot√£o principal para executar
    if st.button("üöÄ Executar Invent√°rio Completo", type="primary", use_container_width=True):
        executar_inventario_completo(config_areas, parametros)


if __name__ == "__main__":
    main()